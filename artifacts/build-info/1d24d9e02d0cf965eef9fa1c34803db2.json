{"id":"1d24d9e02d0cf965eef9fa1c34803db2","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"contracts/lens/IPyth.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"},"contracts/lens/IPythEvents.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n"},"contracts/lens/PythStructs.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n"},"contracts/SmartOracle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport {IPyth} from \"./lens/IPyth.sol\";\n\nimport {PythStructs} from \"./lens/PythStructs.sol\";\n\ncontract SmartOracle is Ownable, Pausable {\n    IPyth pyth;\n    using Counters for Counters.Counter;\n    Counters.Counter public tokenIds;\n    address public immutable gelatoMsgSender;\n\n    struct Price {\n        int64 price;\n        uint256 lastUpdateTimestamp;\n    }\n\n    Price public currentPrice;\n\n    constructor(address _gelatoMsgSender, address pythContract) {\n        gelatoMsgSender = _gelatoMsgSender;\n        pyth = IPyth(pythContract);\n    }\n\n    function updatePrice(\n        bytes[] memory updatePriceData\n    ) external onlyGelatoMsgSender {\n        uint256 fee = pyth.getUpdateFee(updatePriceData);\n\n        pyth.updatePriceFeeds{value: fee}(updatePriceData);\n\n        bytes32 priceID = bytes32(\n            0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6\n        );\n\n        PythStructs.Price memory check_price = pyth.getPrice(priceID);\n\n        currentPrice = Price(check_price.price, check_price.publishTime);\n    }\n\n    function getPrice() public view returns (Price memory) {\n        return currentPrice;\n    }\n\n    modifier onlyGelatoMsgSender() {\n        require(\n            msg.sender == gelatoMsgSender,\n            \"Only dedicated gelato msg.sender\"\n        );\n        _;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function withdraw() external onlyOwner returns (bool) {\n        (bool result, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        return result;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[242],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":243,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":242,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,242],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/security/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","exportedSymbols":{"Context":[242],"Pausable":[220]},"id":221,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":221,"sourceUnit":243,"src":"130:30:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":117,"name":"Context","nameLocations":["632:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":242,"src":"632:7:1"},"id":118,"nodeType":"InheritanceSpecifier","src":"632:7:1"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"162:439:1","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":220,"linearizedBaseContracts":[220,242],"name":"Pausable","nameLocation":"620:8:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"646:73:1","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":123,"name":"Paused","nameLocation":"730:6:1","nodeType":"EventDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"745:7:1","nodeType":"VariableDeclaration","scope":123,"src":"737:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"736:17:1"},"src":"724:30:1"},{"anonymous":false,"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"760:70:1","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":128,"name":"Unpaused","nameLocation":"841:8:1","nodeType":"EventDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"858:7:1","nodeType":"VariableDeclaration","scope":128,"src":"850:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"850:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"849:17:1"},"src":"835:32:1"},{"constant":false,"id":130,"mutability":"mutable","name":"_paused","nameLocation":"886:7:1","nodeType":"VariableDeclaration","scope":220,"src":"873:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":129,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":138,"nodeType":"Block","src":"986:32:1","statements":[{"expression":{"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":134,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"996:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1006:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"996:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":137,"nodeType":"ExpressionStatement","src":"996:15:1"}]},"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"900:67:1","text":" @dev Initializes the contract in unpaused state."},"id":139,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[],"src":"983:2:1"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"986:0:1"},"scope":220,"src":"972:46:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":146,"nodeType":"Block","src":"1229:47:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":142,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"1239:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1239:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"ExpressionStatement","src":"1239:19:1"},{"id":145,"nodeType":"PlaceholderStatement","src":"1268:1:1"}]},"documentation":{"id":140,"nodeType":"StructuredDocumentation","src":"1024:175:1","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":147,"name":"whenNotPaused","nameLocation":"1213:13:1","nodeType":"ModifierDefinition","parameters":{"id":141,"nodeType":"ParameterList","parameters":[],"src":"1226:2:1"},"src":"1204:72:1","virtual":false,"visibility":"internal"},{"body":{"id":154,"nodeType":"Block","src":"1476:44:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":150,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1486:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":152,"nodeType":"ExpressionStatement","src":"1486:16:1"},{"id":153,"nodeType":"PlaceholderStatement","src":"1512:1:1"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"1282:167:1","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":155,"name":"whenPaused","nameLocation":"1463:10:1","nodeType":"ModifierDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[],"src":"1473:2:1"},"src":"1454:66:1","virtual":false,"visibility":"internal"},{"body":{"id":163,"nodeType":"Block","src":"1668:31:1","statements":[{"expression":{"id":161,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"1685:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":160,"id":162,"nodeType":"Return","src":"1678:14:1"}]},"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"1526:84:1","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":164,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[],"src":"1630:2:1"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":164,"src":"1662:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":158,"name":"bool","nodeType":"ElementaryTypeName","src":"1662:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1661:6:1"},"scope":220,"src":"1615:84:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":175,"nodeType":"Block","src":"1818:55:1","statements":[{"expression":{"arguments":[{"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1836:9:1","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":169,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"1837:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:18:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1828:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":174,"nodeType":"ExpressionStatement","src":"1828:38:1"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"1705:57:1","text":" @dev Throws if the contract is paused."},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1776:17:1","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[],"src":"1793:2:1"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"1818:0:1"},"scope":220,"src":"1767:106:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":186,"nodeType":"Block","src":"1993:58:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":181,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"2011:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2021:22:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":180,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2003:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2003:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":185,"nodeType":"ExpressionStatement","src":"2003:41:1"}]},"documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"1879:61:1","text":" @dev Throws if the contract is not paused."},"id":187,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"1954:14:1","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[],"src":"1968:2:1"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"1993:0:1"},"scope":220,"src":"1945:106:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":202,"nodeType":"Block","src":"2235:66:1","statements":[{"expression":{"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":193,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"2245:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2255:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2245:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":196,"nodeType":"ExpressionStatement","src":"2245:14:1"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":198,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2281:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":197,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2274:6:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":201,"nodeType":"EmitStatement","src":"2269:25:1"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"2057:124:1","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":203,"implemented":true,"kind":"function","modifiers":[{"id":191,"kind":"modifierInvocation","modifierName":{"id":190,"name":"whenNotPaused","nameLocations":["2221:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"2221:13:1"},"nodeType":"ModifierInvocation","src":"2221:13:1"}],"name":"_pause","nameLocation":"2195:6:1","nodeType":"FunctionDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"2201:2:1"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"2235:0:1"},"scope":220,"src":"2186:115:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":218,"nodeType":"Block","src":"2481:69:1","statements":[{"expression":{"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":209,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"2491:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2501:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2491:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":212,"nodeType":"ExpressionStatement","src":"2491:15:1"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":214,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2530:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":213,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"2521:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"EmitStatement","src":"2516:27:1"}]},"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"2307:121:1","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":219,"implemented":true,"kind":"function","modifiers":[{"id":207,"kind":"modifierInvocation","modifierName":{"id":206,"name":"whenPaused","nameLocations":["2470:10:1"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"2470:10:1"},"nodeType":"ModifierInvocation","src":"2470:10:1"}],"name":"_unpause","nameLocation":"2442:8:1","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[],"src":"2450:2:1"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"2481:0:1"},"scope":220,"src":"2433:117:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":221,"src":"602:1950:1","usedErrors":[]}],"src":"105:2448:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[242]},"id":243,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":222,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"111:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":242,"linearizedBaseContracts":[242],"name":"Context","nameLocation":"626:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":231,"nodeType":"Block","src":"702:34:2","statements":[{"expression":{"expression":{"id":228,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:2","memberName":"sender","nodeType":"MemberAccess","src":"719:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":227,"id":230,"nodeType":"Return","src":"712:17:2"}]},"id":232,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:2","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"659:2:2"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":232,"src":"693:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":225,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:2"},"scope":242,"src":"640:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":240,"nodeType":"Block","src":"809:32:2","statements":[{"expression":{"expression":{"id":237,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:2","memberName":"data","nodeType":"MemberAccess","src":"826:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":236,"id":239,"nodeType":"Return","src":"819:15:2"}]},"id":241,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:2","nodeType":"FunctionDefinition","parameters":{"id":233,"nodeType":"ParameterList","parameters":[],"src":"759:2:2"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":241,"src":"793:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":234,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:2"},"scope":242,"src":"742:99:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":243,"src":"608:235:2","usedErrors":[]}],"src":"86:758:2"},"id":2},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[316]},"id":317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":244,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"112:311:3","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":316,"linearizedBaseContracts":[316],"name":"Counters","nameLocation":"432:8:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":248,"members":[{"constant":false,"id":247,"mutability":"mutable","name":"_value","nameLocation":"794:6:3","nodeType":"VariableDeclaration","scope":248,"src":"786:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:3","nodeType":"StructDefinition","scope":316,"src":"447:374:3","visibility":"public"},{"body":{"id":259,"nodeType":"Block","src":"901:38:3","statements":[{"expression":{"expression":{"id":256,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"918:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":247,"src":"918:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":255,"id":258,"nodeType":"Return","src":"911:21:3"}]},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:3","nodeType":"FunctionDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"counter","nameLocation":"860:7:3","nodeType":"VariableDeclaration","scope":260,"src":"844:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":250,"nodeType":"UserDefinedTypeName","pathNode":{"id":249,"name":"Counter","nameLocations":["844:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"844:7:3"},"referencedDeclaration":248,"src":"844:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:3"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"892:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:3"},"scope":316,"src":"827:112:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":273,"nodeType":"Block","src":"998:70:3","statements":[{"id":272,"nodeType":"UncheckedBlock","src":"1008:54:3","statements":[{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":266,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"1032:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":247,"src":"1032:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":271,"nodeType":"ExpressionStatement","src":"1032:19:3"}]}]},"id":274,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:3","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"counter","nameLocation":"980:7:3","nodeType":"VariableDeclaration","scope":274,"src":"964:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":262,"nodeType":"UserDefinedTypeName","pathNode":{"id":261,"name":"Counter","nameLocations":["964:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"964:7:3"},"referencedDeclaration":248,"src":"964:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:3"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[],"src":"998:0:3"},"scope":316,"src":"945:123:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":301,"nodeType":"Block","src":"1127:176:3","statements":[{"assignments":[281],"declarations":[{"constant":false,"id":281,"mutability":"mutable","name":"value","nameLocation":"1145:5:3","nodeType":"VariableDeclaration","scope":301,"src":"1137:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":284,"initialValue":{"expression":{"id":282,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1153:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":247,"src":"1153:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1185:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":285,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":291,"nodeType":"ExpressionStatement","src":"1177:49:3"},{"id":300,"nodeType":"UncheckedBlock","src":"1236:61:3","statements":[{"expression":{"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":292,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1260:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":247,"src":"1260:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1277:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":299,"nodeType":"ExpressionStatement","src":"1260:26:3"}]}]},"id":302,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:3","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"counter","nameLocation":"1109:7:3","nodeType":"VariableDeclaration","scope":302,"src":"1093:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":276,"nodeType":"UserDefinedTypeName","pathNode":{"id":275,"name":"Counter","nameLocations":["1093:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"1093:7:3"},"referencedDeclaration":248,"src":"1093:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:3"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"1127:0:3"},"scope":316,"src":"1074:229:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"1358:35:3","statements":[{"expression":{"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":308,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"1368:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":247,"src":"1368:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":313,"nodeType":"ExpressionStatement","src":"1368:18:3"}]},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:3","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"counter","nameLocation":"1340:7:3","nodeType":"VariableDeclaration","scope":315,"src":"1324:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":304,"nodeType":"UserDefinedTypeName","pathNode":{"id":303,"name":"Counter","nameLocations":["1324:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"1324:7:3"},"referencedDeclaration":248,"src":"1324:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:3"},"returnParameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"1358:0:3"},"scope":316,"src":"1309:84:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":317,"src":"424:971:3","usedErrors":[]}],"src":"87:1309:3"},"id":3},"contracts/SmartOracle.sol":{"ast":{"absolutePath":"contracts/SmartOracle.sol","exportedSymbols":{"Counters":[316],"IPyth":[610],"Ownable":[112],"Pausable":[220],"PythStructs":[653],"SmartOracle":[491]},"id":492,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":318,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":492,"sourceUnit":317,"src":"58:68:4","symbolAliases":[{"foreign":{"id":319,"name":"Counters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"66:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":322,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":492,"sourceUnit":113,"src":"127:67:4","symbolAliases":[{"foreign":{"id":321,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"135:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":324,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":492,"sourceUnit":221,"src":"196:71:4","symbolAliases":[{"foreign":{"id":323,"name":"Pausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"204:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lens/IPyth.sol","file":"./lens/IPyth.sol","id":326,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":492,"sourceUnit":611,"src":"269:39:4","symbolAliases":[{"foreign":{"id":325,"name":"IPyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"277:5:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lens/PythStructs.sol","file":"./lens/PythStructs.sol","id":328,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":492,"sourceUnit":654,"src":"310:51:4","symbolAliases":[{"foreign":{"id":327,"name":"PythStructs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"318:11:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":329,"name":"Ownable","nameLocations":["387:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"387:7:4"},"id":330,"nodeType":"InheritanceSpecifier","src":"387:7:4"},{"baseName":{"id":331,"name":"Pausable","nameLocations":["396:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":220,"src":"396:8:4"},"id":332,"nodeType":"InheritanceSpecifier","src":"396:8:4"}],"canonicalName":"SmartOracle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":491,"linearizedBaseContracts":[491,220,112,242],"name":"SmartOracle","nameLocation":"372:11:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":335,"mutability":"mutable","name":"pyth","nameLocation":"417:4:4","nodeType":"VariableDeclaration","scope":491,"src":"411:10:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"},"typeName":{"id":334,"nodeType":"UserDefinedTypeName","pathNode":{"id":333,"name":"IPyth","nameLocations":["411:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"411:5:4"},"referencedDeclaration":610,"src":"411:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"visibility":"internal"},{"global":false,"id":339,"libraryName":{"id":336,"name":"Counters","nameLocations":["433:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"433:8:4"},"nodeType":"UsingForDirective","src":"427:36:4","typeName":{"id":338,"nodeType":"UserDefinedTypeName","pathNode":{"id":337,"name":"Counters.Counter","nameLocations":["446:8:4","455:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"446:16:4"},"referencedDeclaration":248,"src":"446:16:4","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"functionSelector":"714cff56","id":342,"mutability":"mutable","name":"tokenIds","nameLocation":"492:8:4","nodeType":"VariableDeclaration","scope":491,"src":"468:32:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage","typeString":"struct Counters.Counter"},"typeName":{"id":341,"nodeType":"UserDefinedTypeName","pathNode":{"id":340,"name":"Counters.Counter","nameLocations":["468:8:4","477:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"468:16:4"},"referencedDeclaration":248,"src":"468:16:4","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$248_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"public"},{"constant":false,"functionSelector":"c5443082","id":344,"mutability":"immutable","name":"gelatoMsgSender","nameLocation":"531:15:4","nodeType":"VariableDeclaration","scope":491,"src":"506:40:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"506:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"canonicalName":"SmartOracle.Price","id":349,"members":[{"constant":false,"id":346,"mutability":"mutable","name":"price","nameLocation":"582:5:4","nodeType":"VariableDeclaration","scope":349,"src":"576:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":345,"name":"int64","nodeType":"ElementaryTypeName","src":"576:5:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"lastUpdateTimestamp","nameLocation":"605:19:4","nodeType":"VariableDeclaration","scope":349,"src":"597:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"597:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Price","nameLocation":"560:5:4","nodeType":"StructDefinition","scope":491,"src":"553:78:4","visibility":"public"},{"constant":false,"functionSelector":"9d1b464a","id":352,"mutability":"mutable","name":"currentPrice","nameLocation":"650:12:4","nodeType":"VariableDeclaration","scope":491,"src":"637:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage","typeString":"struct SmartOracle.Price"},"typeName":{"id":351,"nodeType":"UserDefinedTypeName","pathNode":{"id":350,"name":"Price","nameLocations":["637:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":349,"src":"637:5:4"},"referencedDeclaration":349,"src":"637:5:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage_ptr","typeString":"struct SmartOracle.Price"}},"visibility":"public"},{"body":{"id":369,"nodeType":"Block","src":"729:87:4","statements":[{"expression":{"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":359,"name":"gelatoMsgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"739:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":360,"name":"_gelatoMsgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"757:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"739:34:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":362,"nodeType":"ExpressionStatement","src":"739:34:4"},{"expression":{"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":363,"name":"pyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"783:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":365,"name":"pythContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"796:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"IPyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"790:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPyth_$610_$","typeString":"type(contract IPyth)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"src":"783:26:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"id":368,"nodeType":"ExpressionStatement","src":"783:26:4"}]},"id":370,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"_gelatoMsgSender","nameLocation":"689:16:4","nodeType":"VariableDeclaration","scope":370,"src":"681:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"681:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"pythContract","nameLocation":"715:12:4","nodeType":"VariableDeclaration","scope":370,"src":"707:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"680:48:4"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"729:0:4"},"scope":491,"src":"669:147:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":419,"nodeType":"Block","src":"918:399:4","statements":[{"assignments":[379],"declarations":[{"constant":false,"id":379,"mutability":"mutable","name":"fee","nameLocation":"936:3:4","nodeType":"VariableDeclaration","scope":419,"src":"928:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"928:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":384,"initialValue":{"arguments":[{"id":382,"name":"updatePriceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"960:15:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"id":380,"name":"pyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"942:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"947:12:4","memberName":"getUpdateFee","nodeType":"MemberAccess","referencedDeclaration":591,"src":"942:17:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory[] memory) view external returns (uint256)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"942:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"928:48:4"},{"expression":{"arguments":[{"id":390,"name":"updatePriceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"1021:15:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"id":385,"name":"pyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"987:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"992:16:4","memberName":"updatePriceFeeds","nodeType":"MemberAccess","referencedDeclaration":569,"src":"987:21:4","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes memory[] memory) payable external"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":388,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1016:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"987:33:4","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$__$value","typeString":"function (bytes memory[] memory) payable external"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"987:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"987:50:4"},{"assignments":[394],"declarations":[{"constant":false,"id":394,"mutability":"mutable","name":"priceID","nameLocation":"1056:7:4","nodeType":"VariableDeclaration","scope":419,"src":"1048:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":399,"initialValue":{"arguments":[{"hexValue":"307863613830626136646333326530386430366631616138383630313165656431643737633737626539656237363163633130643732623764306132666435376136","id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1087:66:4","typeDescriptions":{"typeIdentifier":"t_rational_91594638522120967751525968667680286710245649051692871945356656190851899021222_by_1","typeString":"int_const 9159...(69 digits omitted)...1222"},"value":"0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_91594638522120967751525968667680286710245649051692871945356656190851899021222_by_1","typeString":"int_const 9159...(69 digits omitted)...1222"}],"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1066:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1066:7:4","typeDescriptions":{}}},"id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1066:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1048:115:4"},{"assignments":[404],"declarations":[{"constant":false,"id":404,"mutability":"mutable","name":"check_price","nameLocation":"1199:11:4","nodeType":"VariableDeclaration","scope":419,"src":"1174:36:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":403,"nodeType":"UserDefinedTypeName","pathNode":{"id":402,"name":"PythStructs.Price","nameLocations":["1174:11:4","1186:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1174:17:4"},"referencedDeclaration":643,"src":"1174:17:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"id":409,"initialValue":{"arguments":[{"id":407,"name":"priceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"1227:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":405,"name":"pyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1213:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$610","typeString":"contract IPyth"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1218:8:4","memberName":"getPrice","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1213:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Price_$643_memory_ptr_$","typeString":"function (bytes32) view external returns (struct PythStructs.Price memory)"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1213:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"1174:61:4"},{"expression":{"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":410,"name":"currentPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"1246:12:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage","typeString":"struct SmartOracle.Price storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":412,"name":"check_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"1267:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1279:5:4","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":636,"src":"1267:17:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},{"expression":{"id":414,"name":"check_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"1286:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1298:11:4","memberName":"publishTime","nodeType":"MemberAccess","referencedDeclaration":642,"src":"1286:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":411,"name":"Price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1261:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Price_$349_storage_ptr_$","typeString":"type(struct SmartOracle.Price storage pointer)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1261:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_memory_ptr","typeString":"struct SmartOracle.Price memory"}},"src":"1246:64:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage","typeString":"struct SmartOracle.Price storage ref"}},"id":418,"nodeType":"ExpressionStatement","src":"1246:64:4"}]},"functionSelector":"2592c0bf","id":420,"implemented":true,"kind":"function","modifiers":[{"id":376,"kind":"modifierInvocation","modifierName":{"id":375,"name":"onlyGelatoMsgSender","nameLocations":["898:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":441,"src":"898:19:4"},"nodeType":"ModifierInvocation","src":"898:19:4"}],"name":"updatePrice","nameLocation":"831:11:4","nodeType":"FunctionDefinition","parameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"updatePriceData","nameLocation":"867:15:4","nodeType":"VariableDeclaration","scope":420,"src":"852:30:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":371,"name":"bytes","nodeType":"ElementaryTypeName","src":"852:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":372,"nodeType":"ArrayTypeName","src":"852:7:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"842:46:4"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[],"src":"918:0:4"},"scope":491,"src":"822:495:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":428,"nodeType":"Block","src":"1378:36:4","statements":[{"expression":{"id":426,"name":"currentPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"1395:12:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage","typeString":"struct SmartOracle.Price storage ref"}},"functionReturnParameters":425,"id":427,"nodeType":"Return","src":"1388:19:4"}]},"functionSelector":"98d5fdca","id":429,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"1332:8:4","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[],"src":"1340:2:4"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"1364:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_memory_ptr","typeString":"struct SmartOracle.Price"},"typeName":{"id":423,"nodeType":"UserDefinedTypeName","pathNode":{"id":422,"name":"Price","nameLocations":["1364:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":349,"src":"1364:5:4"},"referencedDeclaration":349,"src":"1364:5:4","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$349_storage_ptr","typeString":"struct SmartOracle.Price"}},"visibility":"internal"}],"src":"1363:14:4"},"scope":491,"src":"1323:91:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":440,"nodeType":"Block","src":"1451:136:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":432,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1482:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1486:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1482:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":434,"name":"gelatoMsgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1496:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1482:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79206465646963617465642067656c61746f206d73672e73656e646572","id":436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1525:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ffba76c61aba56c8855f6a59c6db903331497be413996129a935f4a57f92a5bf","typeString":"literal_string \"Only dedicated gelato msg.sender\""},"value":"Only dedicated gelato msg.sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ffba76c61aba56c8855f6a59c6db903331497be413996129a935f4a57f92a5bf","typeString":"literal_string \"Only dedicated gelato msg.sender\""}],"id":431,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1461:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1461:108:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":438,"nodeType":"ExpressionStatement","src":"1461:108:4"},{"id":439,"nodeType":"PlaceholderStatement","src":"1579:1:4"}]},"id":441,"name":"onlyGelatoMsgSender","nameLocation":"1429:19:4","nodeType":"ModifierDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[],"src":"1448:2:4"},"src":"1420:167:4","virtual":false,"visibility":"internal"},{"body":{"id":449,"nodeType":"Block","src":"1629:25:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":446,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"1639:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":448,"nodeType":"ExpressionStatement","src":"1639:8:4"}]},"functionSelector":"8456cb59","id":450,"implemented":true,"kind":"function","modifiers":[{"id":444,"kind":"modifierInvocation","modifierName":{"id":443,"name":"onlyOwner","nameLocations":["1619:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1619:9:4"},"nodeType":"ModifierInvocation","src":"1619:9:4"}],"name":"pause","nameLocation":"1602:5:4","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[],"src":"1607:2:4"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[],"src":"1629:0:4"},"scope":491,"src":"1593:61:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":458,"nodeType":"Block","src":"1698:27:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":455,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"1708:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1708:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"1708:10:4"}]},"functionSelector":"3f4ba83a","id":459,"implemented":true,"kind":"function","modifiers":[{"id":453,"kind":"modifierInvocation","modifierName":{"id":452,"name":"onlyOwner","nameLocations":["1688:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1688:9:4"},"nodeType":"ModifierInvocation","src":"1688:9:4"}],"name":"unpause","nameLocation":"1669:7:4","nodeType":"FunctionDefinition","parameters":{"id":451,"nodeType":"ParameterList","parameters":[],"src":"1676:2:4"},"returnParameters":{"id":454,"nodeType":"ParameterList","parameters":[],"src":"1698:0:4"},"scope":491,"src":"1660:65:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":462,"nodeType":"Block","src":"1758:2:4","statements":[]},"id":463,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[],"src":"1738:2:4"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"1758:0:4"},"scope":491,"src":"1731:29:4","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":489,"nodeType":"Block","src":"1820:138:4","statements":[{"assignments":[471,null],"declarations":[{"constant":false,"id":471,"mutability":"mutable","name":"result","nameLocation":"1836:6:4","nodeType":"VariableDeclaration","scope":489,"src":"1831:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":470,"name":"bool","nodeType":"ElementaryTypeName","src":"1831:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":486,"initialValue":{"arguments":[{"hexValue":"","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1925:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":474,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1856:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1860:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1856:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1848:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"1848:8:4","stateMutability":"payable","typeDescriptions":{}}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1848:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1868:4:4","memberName":"call","nodeType":"MemberAccess","src":"1848:24:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":480,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1901:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SmartOracle_$491","typeString":"contract SmartOracle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SmartOracle_$491","typeString":"contract SmartOracle"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1893:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"1893:7:4","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1893:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1907:7:4","memberName":"balance","nodeType":"MemberAccess","src":"1893:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1848:76:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1848:80:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1830:98:4"},{"expression":{"id":487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1945:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":469,"id":488,"nodeType":"Return","src":"1938:13:4"}]},"functionSelector":"3ccfd60b","id":490,"implemented":true,"kind":"function","modifiers":[{"id":466,"kind":"modifierInvocation","modifierName":{"id":465,"name":"onlyOwner","nameLocations":["1795:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1795:9:4"},"nodeType":"ModifierInvocation","src":"1795:9:4"}],"name":"withdraw","nameLocation":"1775:8:4","nodeType":"FunctionDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[],"src":"1783:2:4"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":490,"src":"1814:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":467,"name":"bool","nodeType":"ElementaryTypeName","src":"1814:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1813:6:4"},"scope":491,"src":"1766:192:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":492,"src":"363:1597:4","usedErrors":[]}],"src":"32:1929:4"},"id":4},"contracts/lens/IPyth.sol":{"ast":{"absolutePath":"contracts/lens/IPyth.sol","exportedSymbols":{"IPyth":[610],"IPythEvents":[632],"PythStructs":[653]},"id":611,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":493,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:5"},{"absolutePath":"contracts/lens/PythStructs.sol","file":"./PythStructs.sol","id":494,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":611,"sourceUnit":654,"src":"64:27:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lens/IPythEvents.sol","file":"./IPythEvents.sol","id":495,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":611,"sourceUnit":633,"src":"92:27:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":497,"name":"IPythEvents","nameLocations":["373:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":632,"src":"373:11:5"},"id":498,"nodeType":"InheritanceSpecifier","src":"373:11:5"}],"canonicalName":"IPyth","contractDependencies":[],"contractKind":"interface","documentation":{"id":496,"nodeType":"StructuredDocumentation","src":"121:233:5","text":"@title Consume prices from the Pyth Network (https://pyth.network/).\n @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n @author Pyth Data Association"},"fullyImplemented":false,"id":610,"linearizedBaseContracts":[610,632],"name":"IPyth","nameLocation":"364:5:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"391:104:5","text":"@notice Returns the period (in seconds) that a price feed is considered valid since its publish time"},"functionSelector":"e18910a3","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"getValidTimePeriod","nameLocation":"509:18:5","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"527:2:5"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"validTimePeriod","nameLocation":"558:15:5","nodeType":"VariableDeclaration","scope":504,"src":"553:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint","nodeType":"ElementaryTypeName","src":"553:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"552:22:5"},"scope":610,"src":"500:75:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"581:364:5","text":"@notice Returns the price and confidence interval.\n @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"31d98b3f","id":513,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"959:8:5","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"id","nameLocation":"985:2:5","nodeType":"VariableDeclaration","scope":513,"src":"977:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"977:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"967:26:5"},"returnParameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"price","nameLocation":"1042:5:5","nodeType":"VariableDeclaration","scope":513,"src":"1017:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":510,"nodeType":"UserDefinedTypeName","pathNode":{"id":509,"name":"PythStructs.Price","nameLocations":["1017:11:5","1029:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1017:17:5"},"referencedDeclaration":643,"src":"1017:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1016:32:5"},"scope":610,"src":"950:99:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"1055:359:5","text":"@notice Returns the exponentially-weighted moving average price and confidence interval.\n @dev Reverts if the EMA price is not available.\n @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"b5dcc911","id":522,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPrice","nameLocation":"1428:11:5","nodeType":"FunctionDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"id","nameLocation":"1457:2:5","nodeType":"VariableDeclaration","scope":522,"src":"1449:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1439:26:5"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"price","nameLocation":"1514:5:5","nodeType":"VariableDeclaration","scope":522,"src":"1489:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":519,"nodeType":"UserDefinedTypeName","pathNode":{"id":518,"name":"PythStructs.Price","nameLocations":["1489:11:5","1501:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1489:17:5"},"referencedDeclaration":643,"src":"1489:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1488:32:5"},"scope":610,"src":"1419:102:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"1527:690:5","text":"@notice Returns the price of a price feed without any sanity checks.\n @dev This function returns the most recent price update in this contract without any recency checks.\n This function is unsafe as the returned price update may be arbitrarily far in the past.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"96834ad3","id":531,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceUnsafe","nameLocation":"2231:14:5","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"id","nameLocation":"2263:2:5","nodeType":"VariableDeclaration","scope":531,"src":"2255:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2255:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2245:26:5"},"returnParameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"price","nameLocation":"2320:5:5","nodeType":"VariableDeclaration","scope":531,"src":"2295:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":528,"nodeType":"UserDefinedTypeName","pathNode":{"id":527,"name":"PythStructs.Price","nameLocations":["2295:11:5","2307:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2295:17:5"},"referencedDeclaration":643,"src":"2295:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2294:32:5"},"scope":610,"src":"2222:105:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"2333:423:5","text":"@notice Returns the price that is no older than `age` seconds of the current time.\n @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"a4ae35e0","id":542,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceNoOlderThan","nameLocation":"2770:19:5","nodeType":"FunctionDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"id","nameLocation":"2807:2:5","nodeType":"VariableDeclaration","scope":542,"src":"2799:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2799:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"age","nameLocation":"2824:3:5","nodeType":"VariableDeclaration","scope":542,"src":"2819:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":535,"name":"uint","nodeType":"ElementaryTypeName","src":"2819:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2789:44:5"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"price","nameLocation":"2882:5:5","nodeType":"VariableDeclaration","scope":542,"src":"2857:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":539,"nodeType":"UserDefinedTypeName","pathNode":{"id":538,"name":"PythStructs.Price","nameLocations":["2857:11:5","2869:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2857:17:5"},"referencedDeclaration":643,"src":"2857:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2856:32:5"},"scope":610,"src":"2761:128:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"2895:925:5","text":"@notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n However, if the price is not recent this function returns the latest available price.\n The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n the returned price is recent or useful for any particular application.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"9474f45b","id":551,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceUnsafe","nameLocation":"3834:17:5","nodeType":"FunctionDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"id","nameLocation":"3869:2:5","nodeType":"VariableDeclaration","scope":551,"src":"3861:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3861:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3851:26:5"},"returnParameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":549,"mutability":"mutable","name":"price","nameLocation":"3926:5:5","nodeType":"VariableDeclaration","scope":551,"src":"3901:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":548,"nodeType":"UserDefinedTypeName","pathNode":{"id":547,"name":"PythStructs.Price","nameLocations":["3901:11:5","3913:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3901:17:5"},"referencedDeclaration":643,"src":"3901:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"3900:32:5"},"scope":610,"src":"3825:108:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"3939:472:5","text":"@notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n of the current time.\n @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"711a2e28","id":562,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceNoOlderThan","nameLocation":"4425:22:5","nodeType":"FunctionDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"id","nameLocation":"4465:2:5","nodeType":"VariableDeclaration","scope":562,"src":"4457:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4457:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"age","nameLocation":"4482:3:5","nodeType":"VariableDeclaration","scope":562,"src":"4477:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint","nodeType":"ElementaryTypeName","src":"4477:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:44:5"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"price","nameLocation":"4540:5:5","nodeType":"VariableDeclaration","scope":562,"src":"4515:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":559,"nodeType":"UserDefinedTypeName","pathNode":{"id":558,"name":"PythStructs.Price","nameLocations":["4515:11:5","4527:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"4515:17:5"},"referencedDeclaration":643,"src":"4515:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"4514:32:5"},"scope":610,"src":"4416:131:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"4553:535:5","text":"@notice Update price feeds with given update messages.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n Prices will be updated if they are more recent than the current stored prices.\n The call will succeed even if the update is not the most recent.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data."},"functionSelector":"ef9e5e28","id":569,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeeds","nameLocation":"5102:16:5","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"updateData","nameLocation":"5136:10:5","nodeType":"VariableDeclaration","scope":569,"src":"5119:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":564,"name":"bytes","nodeType":"ElementaryTypeName","src":"5119:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":565,"nodeType":"ArrayTypeName","src":"5119:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5118:29:5"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"5164:0:5"},"scope":610,"src":"5093:72:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"5171:1299:5","text":"@notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n Otherwise, it calls updatePriceFeeds method to update the prices.\n @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`"},"functionSelector":"b9256d28","id":582,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeedsIfNecessary","nameLocation":"6484:27:5","nodeType":"FunctionDefinition","parameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"updateData","nameLocation":"6538:10:5","nodeType":"VariableDeclaration","scope":582,"src":"6521:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":571,"name":"bytes","nodeType":"ElementaryTypeName","src":"6521:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":572,"nodeType":"ArrayTypeName","src":"6521:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"priceIds","nameLocation":"6577:8:5","nodeType":"VariableDeclaration","scope":582,"src":"6558:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6558:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":575,"nodeType":"ArrayTypeName","src":"6558:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"publishTimes","nameLocation":"6613:12:5","nodeType":"VariableDeclaration","scope":582,"src":"6595:30:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":577,"name":"uint64","nodeType":"ElementaryTypeName","src":"6595:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":578,"nodeType":"ArrayTypeName","src":"6595:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"6511:120:5"},"returnParameters":{"id":581,"nodeType":"ParameterList","parameters":[],"src":"6648:0:5"},"scope":610,"src":"6475:174:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"6655:178:5","text":"@notice Returns the required fee to update an array of price updates.\n @param updateData Array of price update data.\n @return feeAmount The required fee in Wei."},"functionSelector":"d47eed45","id":591,"implemented":false,"kind":"function","modifiers":[],"name":"getUpdateFee","nameLocation":"6847:12:5","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"updateData","nameLocation":"6886:10:5","nodeType":"VariableDeclaration","scope":591,"src":"6869:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":584,"name":"bytes","nodeType":"ElementaryTypeName","src":"6869:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":585,"nodeType":"ArrayTypeName","src":"6869:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6859:43:5"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"feeAmount","nameLocation":"6931:9:5","nodeType":"VariableDeclaration","scope":591,"src":"6926:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint","nodeType":"ElementaryTypeName","src":"6926:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6925:16:5"},"scope":610,"src":"6838:104:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"6948:1154:5","text":"@notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n within `minPublishTime` and `maxPublishTime`.\n You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n no update for any of the given `priceIds` within the given time range.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order)."},"functionSelector":"4716e9c5","id":609,"implemented":false,"kind":"function","modifiers":[],"name":"parsePriceFeedUpdates","nameLocation":"8116:21:5","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"updateData","nameLocation":"8164:10:5","nodeType":"VariableDeclaration","scope":609,"src":"8147:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":593,"name":"bytes","nodeType":"ElementaryTypeName","src":"8147:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":594,"nodeType":"ArrayTypeName","src":"8147:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":598,"mutability":"mutable","name":"priceIds","nameLocation":"8203:8:5","nodeType":"VariableDeclaration","scope":609,"src":"8184:27:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8184:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":597,"nodeType":"ArrayTypeName","src":"8184:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":600,"mutability":"mutable","name":"minPublishTime","nameLocation":"8228:14:5","nodeType":"VariableDeclaration","scope":609,"src":"8221:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":599,"name":"uint64","nodeType":"ElementaryTypeName","src":"8221:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"maxPublishTime","nameLocation":"8259:14:5","nodeType":"VariableDeclaration","scope":609,"src":"8252:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":601,"name":"uint64","nodeType":"ElementaryTypeName","src":"8252:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8137:142:5"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"priceFeeds","nameLocation":"8337:10:5","nodeType":"VariableDeclaration","scope":609,"src":"8306:41:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$652_memory_ptr_$dyn_memory_ptr","typeString":"struct PythStructs.PriceFeed[]"},"typeName":{"baseType":{"id":605,"nodeType":"UserDefinedTypeName","pathNode":{"id":604,"name":"PythStructs.PriceFeed","nameLocations":["8306:11:5","8318:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":652,"src":"8306:21:5"},"referencedDeclaration":652,"src":"8306:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_PriceFeed_$652_storage_ptr","typeString":"struct PythStructs.PriceFeed"}},"id":606,"nodeType":"ArrayTypeName","src":"8306:23:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$652_storage_$dyn_storage_ptr","typeString":"struct PythStructs.PriceFeed[]"}},"visibility":"internal"}],"src":"8305:43:5"},"scope":610,"src":"8107:242:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":611,"src":"354:7997:5","usedErrors":[]}],"src":"39:8313:5"},"id":5},"contracts/lens/IPythEvents.sol":{"ast":{"absolutePath":"contracts/lens/IPythEvents.sol","exportedSymbols":{"IPythEvents":[632]},"id":633,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":612,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IPythEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"64:170:6","text":"@title IPythEvents contains the events that Pyth contract emits.\n @dev This interface can be used for listening to the updates for off-chain and testing purposes."},"fullyImplemented":true,"id":632,"linearizedBaseContracts":[632],"name":"IPythEvents","nameLocation":"244:11:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"262:305:6","text":"@dev Emitted when the price feed with `id` has received a fresh update.\n @param id The Pyth Price Feed ID.\n @param publishTime Publish time of the given price update.\n @param price Price of the given price update.\n @param conf Confidence interval of the given price update."},"eventSelector":"d06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec","id":624,"name":"PriceFeedUpdate","nameLocation":"578:15:6","nodeType":"EventDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"619:2:6","nodeType":"VariableDeclaration","scope":624,"src":"603:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":618,"indexed":false,"mutability":"mutable","name":"publishTime","nameLocation":"638:11:6","nodeType":"VariableDeclaration","scope":624,"src":"631:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":617,"name":"uint64","nodeType":"ElementaryTypeName","src":"631:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":620,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"665:5:6","nodeType":"VariableDeclaration","scope":624,"src":"659:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":619,"name":"int64","nodeType":"ElementaryTypeName","src":"659:5:6","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":622,"indexed":false,"mutability":"mutable","name":"conf","nameLocation":"687:4:6","nodeType":"VariableDeclaration","scope":624,"src":"680:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":621,"name":"uint64","nodeType":"ElementaryTypeName","src":"680:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"593:104:6"},"src":"572:126:6"},{"anonymous":false,"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"704:228:6","text":"@dev Emitted when a batch price update is processed successfully.\n @param chainId ID of the source chain that the batch price update comes from.\n @param sequenceNumber Sequence number of the batch price update."},"eventSelector":"943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b","id":631,"name":"BatchPriceFeedUpdate","nameLocation":"943:20:6","nodeType":"EventDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"indexed":false,"mutability":"mutable","name":"chainId","nameLocation":"971:7:6","nodeType":"VariableDeclaration","scope":631,"src":"964:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":626,"name":"uint16","nodeType":"ElementaryTypeName","src":"964:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":629,"indexed":false,"mutability":"mutable","name":"sequenceNumber","nameLocation":"987:14:6","nodeType":"VariableDeclaration","scope":631,"src":"980:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":628,"name":"uint64","nodeType":"ElementaryTypeName","src":"980:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"963:39:6"},"src":"937:66:6"}],"scope":633,"src":"234:771:6","usedErrors":[]}],"src":"39:967:6"},"id":6},"contracts/lens/PythStructs.sol":{"ast":{"absolutePath":"contracts/lens/PythStructs.sol","exportedSymbols":{"PythStructs":[653]},"id":654,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":634,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"PythStructs","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":653,"linearizedBaseContracts":[653],"name":"PythStructs","nameLocation":"73:11:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PythStructs.Price","id":643,"members":[{"constant":false,"id":636,"mutability":"mutable","name":"price","nameLocation":"623:5:7","nodeType":"VariableDeclaration","scope":643,"src":"617:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":635,"name":"int64","nodeType":"ElementaryTypeName","src":"617:5:7","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"conf","nameLocation":"693:4:7","nodeType":"VariableDeclaration","scope":643,"src":"686:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":637,"name":"uint64","nodeType":"ElementaryTypeName","src":"686:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"expo","nameLocation":"739:4:7","nodeType":"VariableDeclaration","scope":643,"src":"733:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":639,"name":"int32","nodeType":"ElementaryTypeName","src":"733:5:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"publishTime","nameLocation":"824:11:7","nodeType":"VariableDeclaration","scope":643,"src":"819:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint","nodeType":"ElementaryTypeName","src":"819:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Price","nameLocation":"584:5:7","nodeType":"StructDefinition","scope":653,"src":"577:265:7","visibility":"public"},{"canonicalName":"PythStructs.PriceFeed","id":652,"members":[{"constant":false,"id":645,"mutability":"mutable","name":"id","nameLocation":"989:2:7","nodeType":"VariableDeclaration","scope":652,"src":"981:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":648,"mutability":"mutable","name":"price","nameLocation":"1041:5:7","nodeType":"VariableDeclaration","scope":652,"src":"1035:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":647,"nodeType":"UserDefinedTypeName","pathNode":{"id":646,"name":"Price","nameLocations":["1035:5:7"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1035:5:7"},"referencedDeclaration":643,"src":"1035:5:7","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"emaPrice","nameLocation":"1134:8:7","nodeType":"VariableDeclaration","scope":652,"src":"1128:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":650,"nodeType":"UserDefinedTypeName","pathNode":{"id":649,"name":"Price","nameLocations":["1128:5:7"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1128:5:7"},"referencedDeclaration":643,"src":"1128:5:7","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$643_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"name":"PriceFeed","nameLocation":"936:9:7","nodeType":"StructDefinition","scope":653,"src":"929:220:7","visibility":"public"}],"scope":654,"src":"64:1087:7","usedErrors":[]}],"src":"39:1113:7"},"id":7}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/Pausable.sol":{"Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":130,"contract":"@openzeppelin/contracts/security/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072b280ec842f2cf78d5684a7b92aede3f94683182a2c71623140eb67b80bc12464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xB280EC842F2CF78D5684A7B92AEDE3F9468318 0x2A 0x2C PUSH18 0x623140EB67B80BC12464736F6C6343000811 STOP CALLER ","sourceMap":"424:971:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072b280ec842f2cf78d5684a7b92aede3f94683182a2c71623140eb67b80bc12464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xB280EC842F2CF78D5684A7B92AEDE3F9468318 0x2A 0x2C PUSH18 0x623140EB67B80BC12464736F6C6343000811 STOP CALLER ","sourceMap":"424:971:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SmartOracle.sol":{"SmartOracle":{"abi":[{"inputs":[{"internalType":"address","name":"_gelatoMsgSender","type":"address"},{"internalType":"address","name":"pythContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"currentPrice","outputs":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint256","name":"lastUpdateTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gelatoMsgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint256","name":"lastUpdateTimestamp","type":"uint256"}],"internalType":"struct SmartOracle.Price","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenIds","outputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updatePriceData","type":"bytes[]"}],"name":"updatePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_139":{"entryPoint":null,"id":139,"parameterSlots":0,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_370":{"entryPoint":null,"id":370,"parameterSlots":2,"returnSlots":0},"@_msgSender_232":{"entryPoint":null,"id":232,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":109,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":189,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":217,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:491:8","statements":[{"nodeType":"YulBlock","src":"6:3:8","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:8","statements":[{"nodeType":"YulAssignment","src":"84:22:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:8"},"nodeType":"YulFunctionCall","src":"93:13:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:8"}]},{"body":{"nodeType":"YulBlock","src":"169:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:8"},"nodeType":"YulFunctionCall","src":"171:12:8"},"nodeType":"YulExpressionStatement","src":"171:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:8"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:8","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:8"},"nodeType":"YulFunctionCall","src":"150:11:8"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:8"},"nodeType":"YulFunctionCall","src":"146:19:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:8"},"nodeType":"YulFunctionCall","src":"135:31:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:8"},"nodeType":"YulFunctionCall","src":"125:42:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:8"},"nodeType":"YulFunctionCall","src":"118:50:8"},"nodeType":"YulIf","src":"115:70:8"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:8","type":""}],"src":"14:177:8"},{"body":{"nodeType":"YulBlock","src":"294:195:8","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:8"},"nodeType":"YulFunctionCall","src":"342:12:8"},"nodeType":"YulExpressionStatement","src":"342:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:8"},"nodeType":"YulFunctionCall","src":"311:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:8"},"nodeType":"YulFunctionCall","src":"307:32:8"},"nodeType":"YulIf","src":"304:52:8"},{"nodeType":"YulAssignment","src":"365:50:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:8"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:8"},"nodeType":"YulFunctionCall","src":"375:40:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:8"}]},{"nodeType":"YulAssignment","src":"424:59:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:8"},"nodeType":"YulFunctionCall","src":"464:18:8"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:8"},"nodeType":"YulFunctionCall","src":"434:49:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:8"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:8","type":""}],"src":"196:293:8"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}","id":8,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b50604051610be0380380610be083398101604081905261002f916100d9565b6100383361006d565b6000805460ff60a01b191690556001600160a01b03918216608052600180546001600160a01b0319169190921617905561010c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d457600080fd5b919050565b600080604083850312156100ec57600080fd5b6100f5836100bd565b9150610103602084016100bd565b90509250929050565b608051610ab261012e60003960008181610250015261029d0152610ab26000f3fe6080604052600436106100ab5760003560e01c80638456cb59116100645780638456cb59146101715780638da5cb5b1461018657806398d5fdca146101b85780639d1b464a14610206578063c54430821461023e578063f2fde38b1461027257600080fd5b80632592c0bf146100b75780633ccfd60b146100d95780633f4ba83a146101035780635c975abb14610118578063714cff5614610137578063715018a61461015c57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d23660046107f1565b610292565b005b3480156100e557600080fd5b506100ee6104c4565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b506100d761051e565b34801561012457600080fd5b50600054600160a01b900460ff166100ee565b34801561014357600080fd5b5060025461014e9081565b6040519081526020016100fa565b34801561016857600080fd5b506100d7610530565b34801561017d57600080fd5b506100d7610542565b34801561019257600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100fa565b3480156101c457600080fd5b5060408051808201825260008082526020918201528151808301835260035460070b8082526004549183019182528351908152905191810191909152016100fa565b34801561021257600080fd5b506003546004546102249160070b9082565b6040805160079390930b83526020830191909152016100fa565b34801561024a57600080fd5b506101a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b506100d761028d36600461090a565b610552565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206465646963617465642067656c61746f206d73672e73656e64657260448201526064015b60405180910390fd5b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061034090859060040161093a565b602060405180830381865afa15801561035d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038191906109cc565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e289083906103b490869060040161093a565b6000604051808303818588803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b50506001546040516331d98b3f60e01b81527fca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6600482018190529450600093506001600160a01b0390911691506331d98b3f90602401608060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047891906109e5565b604080518082019091528151600781900b825260609092015160209091018190526003805467ffffffffffffffff191667ffffffffffffffff9093169290921790915560045550505050565b60006104ce6105cb565b604051600090339047908381818185875af1925050503d8060008114610510576040519150601f19603f3d011682016040523d82523d6000602084013e610515565b606091505b50909250505090565b6105266105cb565b61052e610625565b565b6105386105cb565b61052e600061067a565b61054a6105cb565b61052e6106ca565b61055a6105cb565b6001600160a01b0381166105bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610306565b6105c88161067a565b50565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b61062d61070d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106d261075d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861065d3390565b600054600160a01b900460ff1661052e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610306565b600054600160a01b900460ff161561052e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610306565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e9576107e96107aa565b604052919050565b6000602080838503121561080457600080fd5b823567ffffffffffffffff8082111561081c57600080fd5b8185019150601f868184011261083157600080fd5b823582811115610843576108436107aa565b8060051b6108528682016107c0565b918252848101860191868101908a84111561086c57600080fd5b87870192505b838310156108fc5782358681111561088a5760008081fd5b8701603f81018c1361089c5760008081fd5b888101356040888211156108b2576108b26107aa565b6108c3828901601f19168c016107c0565b8281528e828486010111156108d85760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610872565b9a9950505050505050505050565b60006020828403121561091c57600080fd5b81356001600160a01b038116811461093357600080fd5b9392505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156109be57888603603f1901855282518051808852835b81811015610997578281018a01518982018b0152890161097c565b508781018901849052601f01601f1916909601870195509386019391860191600101610962565b509398975050505050505050565b6000602082840312156109de57600080fd5b5051919050565b6000608082840312156109f757600080fd5b6040516080810167ffffffffffffffff8282108183111715610a1b57610a1b6107aa565b81604052845191508160070b8214610a3257600080fd5b9082526020840151908082168214610a4957600080fd5b5060208201526040830151600381900b8114610a6457600080fd5b6040820152606092830151928101929092525091905056fea264697066735822122043a2e9477dd76c58033e3a0e3c5b332ae16f570f315171b23d6061f55502fe4864736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xBE0 CODESIZE SUB DUP1 PUSH2 0xBE0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xD9 JUMP JUMPDEST PUSH2 0x38 CALLER PUSH2 0x6D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x10C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF5 DUP4 PUSH2 0xBD JUMP JUMPDEST SWAP2 POP PUSH2 0x103 PUSH1 0x20 DUP5 ADD PUSH2 0xBD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xAB2 PUSH2 0x12E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x250 ADD MSTORE PUSH2 0x29D ADD MSTORE PUSH2 0xAB2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x9D1B464A EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xC5443082 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2592C0BF EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x714CFF56 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xB2 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7F1 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x4C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x51E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x14E SWAP1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x530 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x542 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x3 SLOAD PUSH1 0x7 SIGNEXTEND DUP1 DUP3 MSTORE PUSH1 0x4 SLOAD SWAP2 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH2 0x224 SWAP2 PUSH1 0x7 SIGNEXTEND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x7 SWAP4 SWAP1 SWAP4 SIGNEXTEND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A0 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x90A JUMP JUMPDEST PUSH2 0x552 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x30F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206465646963617465642067656C61746F206D73672E73656E646572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD47EED45 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xD47EED45 SWAP1 PUSH2 0x340 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x93A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1DF3CBC5 PUSH1 0xE3 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF9E5E28 SWAP1 DUP4 SWAP1 PUSH2 0x3B4 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x93A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31D98B3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0xCA80BA6DC32E08D06F1AA886011EED1D77C77BE9EB761CC10D72B7D0A2FD57A6 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP5 POP PUSH1 0x0 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x31D98B3F SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x454 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x478 SWAP2 SWAP1 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND DUP3 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CE PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x510 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x515 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x526 PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH2 0x625 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x538 PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH1 0x0 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x54A PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x55A PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x306 JUMP JUMPDEST PUSH2 0x5C8 DUP2 PUSH2 0x67A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x70D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x6D2 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x65D CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7E9 JUMPI PUSH2 0x7E9 PUSH2 0x7AA JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP PUSH1 0x1F DUP7 DUP2 DUP5 ADD SLT PUSH2 0x831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x843 JUMPI PUSH2 0x843 PUSH2 0x7AA JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x852 DUP7 DUP3 ADD PUSH2 0x7C0 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP5 DUP2 ADD DUP7 ADD SWAP2 DUP7 DUP2 ADD SWAP1 DUP11 DUP5 GT ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x8FC JUMPI DUP3 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP8 ADD PUSH1 0x3F DUP2 ADD DUP13 SGT PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP9 DUP3 GT ISZERO PUSH2 0x8B2 JUMPI PUSH2 0x8B2 PUSH2 0x7AA JUMP JUMPDEST PUSH2 0x8C3 DUP3 DUP10 ADD PUSH1 0x1F NOT AND DUP13 ADD PUSH2 0x7C0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP15 DUP3 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x8D8 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP3 DUP3 DUP6 ADD DUP14 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD DUP13 ADD SWAP3 SWAP1 SWAP3 MSTORE POP DUP4 MSTORE POP SWAP2 DUP8 ADD SWAP2 SWAP1 DUP8 ADD SWAP1 PUSH2 0x872 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9BE JUMPI DUP9 DUP7 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP3 MLOAD DUP1 MLOAD DUP1 DUP9 MSTORE DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI DUP3 DUP2 ADD DUP11 ADD MLOAD DUP10 DUP3 ADD DUP12 ADD MSTORE DUP10 ADD PUSH2 0x97C JUMP JUMPDEST POP DUP8 DUP2 ADD DUP10 ADD DUP5 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP7 ADD DUP8 ADD SWAP6 POP SWAP4 DUP7 ADD SWAP4 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x962 JUMP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0xA1B JUMPI PUSH2 0xA1B PUSH2 0x7AA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0x7 SIGNEXTEND DUP3 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0xA49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0xA64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG2 0xE9 SELFBALANCE PUSH30 0xD76C58033E3A0E3C5B332AE16F570F315171B23D6061F55502FE4864736F PUSH13 0x63430008110033000000000000 ","sourceMap":"363:1597:4:-:0;;;669:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:2;936:18:0;:32::i;:::-;1006:5:1;996:15;;-1:-1:-1;;;;996:15:1;;;-1:-1:-1;;;;;739:34:4;;;;;-1:-1:-1;783:26:4;;-1:-1:-1;;;;;;783:26:4;;;;;;;;363:1597;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:177:8:-;93:13;;-1:-1:-1;;;;;135:31:8;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;363:1597:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_463":{"entryPoint":null,"id":463,"parameterSlots":0,"returnSlots":0},"@_checkOwner_54":{"entryPoint":1483,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_232":{"entryPoint":null,"id":232,"parameterSlots":0,"returnSlots":1},"@_pause_203":{"entryPoint":1738,"id":203,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_176":{"entryPoint":1885,"id":176,"parameterSlots":0,"returnSlots":0},"@_requirePaused_187":{"entryPoint":1805,"id":187,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":1658,"id":111,"parameterSlots":1,"returnSlots":0},"@_unpause_219":{"entryPoint":1573,"id":219,"parameterSlots":0,"returnSlots":0},"@currentPrice_352":{"entryPoint":null,"id":352,"parameterSlots":0,"returnSlots":0},"@gelatoMsgSender_344":{"entryPoint":null,"id":344,"parameterSlots":0,"returnSlots":0},"@getPrice_429":{"entryPoint":null,"id":429,"parameterSlots":0,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@pause_450":{"entryPoint":1346,"id":450,"parameterSlots":0,"returnSlots":0},"@paused_164":{"entryPoint":null,"id":164,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":1328,"id":68,"parameterSlots":0,"returnSlots":0},"@tokenIds_342":{"entryPoint":null,"id":342,"parameterSlots":0,"returnSlots":0},"@transferOwnership_91":{"entryPoint":1362,"id":91,"parameterSlots":1,"returnSlots":0},"@unpause_459":{"entryPoint":1310,"id":459,"parameterSlots":0,"returnSlots":0},"@updatePrice_420":{"entryPoint":658,"id":420,"parameterSlots":1,"returnSlots":0},"@withdraw_490":{"entryPoint":1220,"id":490,"parameterSlots":0,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2314,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":2033,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Price_$643_memory_ptr_fromMemory":{"entryPoint":2533,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2362,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_int64_t_uint256__to_t_int64_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ffba76c61aba56c8855f6a59c6db903331497be413996129a935f4a57f92a5bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Price_$349_memory_ptr__to_t_struct$_Price_$349_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1984,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":1962,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8222:8","statements":[{"nodeType":"YulBlock","src":"6:3:8","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:8","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:8"},"nodeType":"YulFunctionCall","src":"66:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:8"},"nodeType":"YulFunctionCall","src":"56:31:8"},"nodeType":"YulExpressionStatement","src":"56:31:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:8","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:8"},"nodeType":"YulFunctionCall","src":"96:15:8"},"nodeType":"YulExpressionStatement","src":"96:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:8"},"nodeType":"YulFunctionCall","src":"120:15:8"},"nodeType":"YulExpressionStatement","src":"120:15:8"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:8"},{"body":{"nodeType":"YulBlock","src":"191:230:8","statements":[{"nodeType":"YulAssignment","src":"201:19:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:8","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:8"},"nodeType":"YulFunctionCall","src":"211:9:8"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:8"}]},{"nodeType":"YulVariableDeclaration","src":"229:58:8","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:8"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"267:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"273:2:8","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"263:3:8"},"nodeType":"YulFunctionCall","src":"263:13:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"282:2:8","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"278:3:8"},"nodeType":"YulFunctionCall","src":"278:7:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"259:3:8"},"nodeType":"YulFunctionCall","src":"259:27:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:8"},"nodeType":"YulFunctionCall","src":"247:40:8"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"362:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"364:16:8"},"nodeType":"YulFunctionCall","src":"364:18:8"},"nodeType":"YulExpressionStatement","src":"364:18:8"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"305:10:8"},{"kind":"number","nodeType":"YulLiteral","src":"317:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"302:2:8"},"nodeType":"YulFunctionCall","src":"302:34:8"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"341:10:8"},{"name":"memPtr","nodeType":"YulIdentifier","src":"353:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"338:2:8"},"nodeType":"YulFunctionCall","src":"338:22:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"299:2:8"},"nodeType":"YulFunctionCall","src":"299:62:8"},"nodeType":"YulIf","src":"296:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"400:2:8","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"404:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"393:6:8"},"nodeType":"YulFunctionCall","src":"393:22:8"},"nodeType":"YulExpressionStatement","src":"393:22:8"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"171:4:8","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:8","type":""}],"src":"146:275:8"},{"body":{"nodeType":"YulBlock","src":"530:1693:8","statements":[{"nodeType":"YulVariableDeclaration","src":"540:12:8","value":{"kind":"number","nodeType":"YulLiteral","src":"550:2:8","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"544:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"597:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"606:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"609:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"599:6:8"},"nodeType":"YulFunctionCall","src":"599:12:8"},"nodeType":"YulExpressionStatement","src":"599:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"572:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"581:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"568:3:8"},"nodeType":"YulFunctionCall","src":"568:23:8"},{"name":"_1","nodeType":"YulIdentifier","src":"593:2:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"564:3:8"},"nodeType":"YulFunctionCall","src":"564:32:8"},"nodeType":"YulIf","src":"561:52:8"},{"nodeType":"YulVariableDeclaration","src":"622:37:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"649:9:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"636:12:8"},"nodeType":"YulFunctionCall","src":"636:23:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"626:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"668:28:8","value":{"kind":"number","nodeType":"YulLiteral","src":"678:18:8","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"672:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"723:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"732:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"735:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"725:6:8"},"nodeType":"YulFunctionCall","src":"725:12:8"},"nodeType":"YulExpressionStatement","src":"725:12:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"711:6:8"},{"name":"_2","nodeType":"YulIdentifier","src":"719:2:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"708:2:8"},"nodeType":"YulFunctionCall","src":"708:14:8"},"nodeType":"YulIf","src":"705:34:8"},{"nodeType":"YulVariableDeclaration","src":"748:32:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"762:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"773:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:8"},"nodeType":"YulFunctionCall","src":"758:22:8"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"752:2:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"789:14:8","value":{"kind":"number","nodeType":"YulLiteral","src":"799:4:8","type":"","value":"0x1f"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"793:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"849:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"858:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"861:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"851:6:8"},"nodeType":"YulFunctionCall","src":"851:12:8"},"nodeType":"YulExpressionStatement","src":"851:12:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"830:2:8"},{"name":"_4","nodeType":"YulIdentifier","src":"834:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"826:3:8"},"nodeType":"YulFunctionCall","src":"826:11:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"839:7:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"822:3:8"},"nodeType":"YulFunctionCall","src":"822:25:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"815:6:8"},"nodeType":"YulFunctionCall","src":"815:33:8"},"nodeType":"YulIf","src":"812:53:8"},{"nodeType":"YulVariableDeclaration","src":"874:26:8","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"897:2:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"884:12:8"},"nodeType":"YulFunctionCall","src":"884:16:8"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"878:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"923:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"925:16:8"},"nodeType":"YulFunctionCall","src":"925:18:8"},"nodeType":"YulExpressionStatement","src":"925:18:8"}]},"condition":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"915:2:8"},{"name":"_2","nodeType":"YulIdentifier","src":"919:2:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"912:2:8"},"nodeType":"YulFunctionCall","src":"912:10:8"},"nodeType":"YulIf","src":"909:36:8"},{"nodeType":"YulVariableDeclaration","src":"954:20:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"968:1:8","type":"","value":"5"},{"name":"_5","nodeType":"YulIdentifier","src":"971:2:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"964:3:8"},"nodeType":"YulFunctionCall","src":"964:10:8"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"958:2:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"983:39:8","value":{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"1014:2:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1018:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:8"},"nodeType":"YulFunctionCall","src":"1010:11:8"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"994:15:8"},"nodeType":"YulFunctionCall","src":"994:28:8"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"987:3:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1031:16:8","value":{"name":"dst","nodeType":"YulIdentifier","src":"1044:3:8"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1035:5:8","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1063:3:8"},{"name":"_5","nodeType":"YulIdentifier","src":"1068:2:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:8"},"nodeType":"YulFunctionCall","src":"1056:15:8"},"nodeType":"YulExpressionStatement","src":"1056:15:8"},{"nodeType":"YulAssignment","src":"1080:19:8","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1091:3:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1096:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1087:3:8"},"nodeType":"YulFunctionCall","src":"1087:12:8"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1080:3:8"}]},{"nodeType":"YulVariableDeclaration","src":"1108:34:8","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1130:2:8"},{"name":"_6","nodeType":"YulIdentifier","src":"1134:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1126:3:8"},"nodeType":"YulFunctionCall","src":"1126:11:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1139:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1122:3:8"},"nodeType":"YulFunctionCall","src":"1122:20:8"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1112:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1174:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1186:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1176:6:8"},"nodeType":"YulFunctionCall","src":"1176:12:8"},"nodeType":"YulExpressionStatement","src":"1176:12:8"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1157:6:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1165:7:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1154:2:8"},"nodeType":"YulFunctionCall","src":"1154:19:8"},"nodeType":"YulIf","src":"1151:39:8"},{"nodeType":"YulVariableDeclaration","src":"1199:22:8","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1214:2:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1218:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1210:3:8"},"nodeType":"YulFunctionCall","src":"1210:11:8"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1203:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1286:907:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1300:36:8","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1332:3:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1319:12:8"},"nodeType":"YulFunctionCall","src":"1319:17:8"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"1304:11:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1384:74:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1402:11:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1412:1:8","type":"","value":"0"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"1406:2:8","type":""}]},{"expression":{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"1437:2:8"},{"name":"_7","nodeType":"YulIdentifier","src":"1441:2:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1430:6:8"},"nodeType":"YulFunctionCall","src":"1430:14:8"},"nodeType":"YulExpressionStatement","src":"1430:14:8"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"1355:11:8"},{"name":"_2","nodeType":"YulIdentifier","src":"1368:2:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1352:2:8"},"nodeType":"YulFunctionCall","src":"1352:19:8"},"nodeType":"YulIf","src":"1349:109:8"},{"nodeType":"YulVariableDeclaration","src":"1471:30:8","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1485:2:8"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"1489:11:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1481:3:8"},"nodeType":"YulFunctionCall","src":"1481:20:8"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"1475:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1563:74:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1581:11:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1591:1:8","type":"","value":"0"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"1585:2:8","type":""}]},{"expression":{"arguments":[{"name":"_9","nodeType":"YulIdentifier","src":"1616:2:8"},{"name":"_9","nodeType":"YulIdentifier","src":"1620:2:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1609:6:8"},"nodeType":"YulFunctionCall","src":"1609:14:8"},"nodeType":"YulExpressionStatement","src":"1609:14:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"1532:2:8"},{"kind":"number","nodeType":"YulLiteral","src":"1536:2:8","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1528:3:8"},"nodeType":"YulFunctionCall","src":"1528:11:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1541:7:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1524:3:8"},"nodeType":"YulFunctionCall","src":"1524:25:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1517:6:8"},"nodeType":"YulFunctionCall","src":"1517:33:8"},"nodeType":"YulIf","src":"1514:123:8"},{"nodeType":"YulVariableDeclaration","src":"1650:36:8","value":{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"1678:2:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1682:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1674:3:8"},"nodeType":"YulFunctionCall","src":"1674:11:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1661:12:8"},"nodeType":"YulFunctionCall","src":"1661:25:8"},"variables":[{"name":"_10","nodeType":"YulTypedName","src":"1654:3:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1699:13:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1710:2:8","type":"","value":"64"},"variables":[{"name":"_11","nodeType":"YulTypedName","src":"1703:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1740:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1742:16:8"},"nodeType":"YulFunctionCall","src":"1742:18:8"},"nodeType":"YulExpressionStatement","src":"1742:18:8"}]},"condition":{"arguments":[{"name":"_10","nodeType":"YulIdentifier","src":"1731:3:8"},{"name":"_2","nodeType":"YulIdentifier","src":"1736:2:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1728:2:8"},"nodeType":"YulFunctionCall","src":"1728:11:8"},"nodeType":"YulIf","src":"1725:37:8"},{"nodeType":"YulVariableDeclaration","src":"1775:65:8","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_10","nodeType":"YulIdentifier","src":"1816:3:8"},{"name":"_4","nodeType":"YulIdentifier","src":"1821:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1812:3:8"},"nodeType":"YulFunctionCall","src":"1812:12:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1830:2:8","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1826:3:8"},"nodeType":"YulFunctionCall","src":"1826:7:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1808:3:8"},"nodeType":"YulFunctionCall","src":"1808:26:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1836:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1804:3:8"},"nodeType":"YulFunctionCall","src":"1804:35:8"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1788:15:8"},"nodeType":"YulFunctionCall","src":"1788:52:8"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"1779:5:8","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1860:5:8"},{"name":"_10","nodeType":"YulIdentifier","src":"1867:3:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1853:6:8"},"nodeType":"YulFunctionCall","src":"1853:18:8"},"nodeType":"YulExpressionStatement","src":"1853:18:8"},{"body":{"nodeType":"YulBlock","src":"1935:77:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1953:12:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1964:1:8","type":"","value":"0"},"variables":[{"name":"_12","nodeType":"YulTypedName","src":"1957:3:8","type":""}]},{"expression":{"arguments":[{"name":"_12","nodeType":"YulIdentifier","src":"1989:3:8"},{"name":"_12","nodeType":"YulIdentifier","src":"1994:3:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1982:6:8"},"nodeType":"YulFunctionCall","src":"1982:16:8"},"nodeType":"YulExpressionStatement","src":"1982:16:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"1898:2:8"},{"name":"_10","nodeType":"YulIdentifier","src":"1902:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1894:3:8"},"nodeType":"YulFunctionCall","src":"1894:12:8"},{"name":"_11","nodeType":"YulIdentifier","src":"1908:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1890:3:8"},"nodeType":"YulFunctionCall","src":"1890:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1914:7:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1887:2:8"},"nodeType":"YulFunctionCall","src":"1887:35:8"},"nodeType":"YulIf","src":"1884:128:8"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2042:5:8"},{"name":"_1","nodeType":"YulIdentifier","src":"2049:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2038:3:8"},"nodeType":"YulFunctionCall","src":"2038:14:8"},{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"2058:2:8"},{"name":"_11","nodeType":"YulIdentifier","src":"2062:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2054:3:8"},"nodeType":"YulFunctionCall","src":"2054:12:8"},{"name":"_10","nodeType":"YulIdentifier","src":"2068:3:8"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2025:12:8"},"nodeType":"YulFunctionCall","src":"2025:47:8"},"nodeType":"YulExpressionStatement","src":"2025:47:8"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2100:5:8"},{"name":"_10","nodeType":"YulIdentifier","src":"2107:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2096:3:8"},"nodeType":"YulFunctionCall","src":"2096:15:8"},{"name":"_1","nodeType":"YulIdentifier","src":"2113:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:8"},"nodeType":"YulFunctionCall","src":"2092:24:8"},{"kind":"number","nodeType":"YulLiteral","src":"2118:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2085:6:8"},"nodeType":"YulFunctionCall","src":"2085:35:8"},"nodeType":"YulExpressionStatement","src":"2085:35:8"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2140:3:8"},{"name":"array","nodeType":"YulIdentifier","src":"2145:5:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2133:6:8"},"nodeType":"YulFunctionCall","src":"2133:18:8"},"nodeType":"YulExpressionStatement","src":"2133:18:8"},{"nodeType":"YulAssignment","src":"2164:19:8","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2175:3:8"},{"name":"_1","nodeType":"YulIdentifier","src":"2180:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2171:3:8"},"nodeType":"YulFunctionCall","src":"2171:12:8"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2164:3:8"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1241:3:8"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1246:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1238:2:8"},"nodeType":"YulFunctionCall","src":"1238:15:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1254:23:8","statements":[{"nodeType":"YulAssignment","src":"1256:19:8","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1267:3:8"},{"name":"_1","nodeType":"YulIdentifier","src":"1272:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1263:3:8"},"nodeType":"YulFunctionCall","src":"1263:12:8"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1256:3:8"}]}]},"pre":{"nodeType":"YulBlock","src":"1234:3:8","statements":[]},"src":"1230:963:8"},{"nodeType":"YulAssignment","src":"2202:15:8","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2212:5:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2202:6:8"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"496:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"507:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"519:6:8","type":""}],"src":"426:1797:8"},{"body":{"nodeType":"YulBlock","src":"2323:92:8","statements":[{"nodeType":"YulAssignment","src":"2333:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2345:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2356:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2341:3:8"},"nodeType":"YulFunctionCall","src":"2341:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2333:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2375:9:8"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2400:6:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2393:6:8"},"nodeType":"YulFunctionCall","src":"2393:14:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2386:6:8"},"nodeType":"YulFunctionCall","src":"2386:22:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2368:6:8"},"nodeType":"YulFunctionCall","src":"2368:41:8"},"nodeType":"YulExpressionStatement","src":"2368:41:8"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2292:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2303:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2314:4:8","type":""}],"src":"2228:187:8"},{"body":{"nodeType":"YulBlock","src":"2521:76:8","statements":[{"nodeType":"YulAssignment","src":"2531:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2543:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2554:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2539:3:8"},"nodeType":"YulFunctionCall","src":"2539:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2531:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2573:9:8"},{"name":"value0","nodeType":"YulIdentifier","src":"2584:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2566:6:8"},"nodeType":"YulFunctionCall","src":"2566:25:8"},"nodeType":"YulExpressionStatement","src":"2566:25:8"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2490:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2501:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2512:4:8","type":""}],"src":"2420:177:8"},{"body":{"nodeType":"YulBlock","src":"2703:102:8","statements":[{"nodeType":"YulAssignment","src":"2713:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2725:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2736:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2721:3:8"},"nodeType":"YulFunctionCall","src":"2721:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2713:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2755:9:8"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2770:6:8"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2786:3:8","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2791:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2782:3:8"},"nodeType":"YulFunctionCall","src":"2782:11:8"},{"kind":"number","nodeType":"YulLiteral","src":"2795:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2778:3:8"},"nodeType":"YulFunctionCall","src":"2778:19:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2766:3:8"},"nodeType":"YulFunctionCall","src":"2766:32:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2748:6:8"},"nodeType":"YulFunctionCall","src":"2748:51:8"},"nodeType":"YulExpressionStatement","src":"2748:51:8"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2672:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2683:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2694:4:8","type":""}],"src":"2602:203:8"},{"body":{"nodeType":"YulBlock","src":"2955:161:8","statements":[{"nodeType":"YulAssignment","src":"2965:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2977:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2988:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2973:3:8"},"nodeType":"YulFunctionCall","src":"2973:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2965:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3007:9:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3029:1:8","type":"","value":"7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3038:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3032:5:8"},"nodeType":"YulFunctionCall","src":"3032:13:8"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"3018:10:8"},"nodeType":"YulFunctionCall","src":"3018:28:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3000:6:8"},"nodeType":"YulFunctionCall","src":"3000:47:8"},"nodeType":"YulExpressionStatement","src":"3000:47:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3067:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3078:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3063:3:8"},"nodeType":"YulFunctionCall","src":"3063:20:8"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3095:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3103:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3091:3:8"},"nodeType":"YulFunctionCall","src":"3091:17:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3085:5:8"},"nodeType":"YulFunctionCall","src":"3085:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3056:6:8"},"nodeType":"YulFunctionCall","src":"3056:54:8"},"nodeType":"YulExpressionStatement","src":"3056:54:8"}]},"name":"abi_encode_tuple_t_struct$_Price_$349_memory_ptr__to_t_struct$_Price_$349_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2924:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2935:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2946:4:8","type":""}],"src":"2810:306:8"},{"body":{"nodeType":"YulBlock","src":"3246:134:8","statements":[{"nodeType":"YulAssignment","src":"3256:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3268:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3279:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3264:3:8"},"nodeType":"YulFunctionCall","src":"3264:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3256:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3298:9:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:1:8","type":"","value":"7"},{"name":"value0","nodeType":"YulIdentifier","src":"3323:6:8"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"3309:10:8"},"nodeType":"YulFunctionCall","src":"3309:21:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3291:6:8"},"nodeType":"YulFunctionCall","src":"3291:40:8"},"nodeType":"YulExpressionStatement","src":"3291:40:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3351:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3362:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3347:3:8"},"nodeType":"YulFunctionCall","src":"3347:18:8"},{"name":"value1","nodeType":"YulIdentifier","src":"3367:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3340:6:8"},"nodeType":"YulFunctionCall","src":"3340:34:8"},"nodeType":"YulExpressionStatement","src":"3340:34:8"}]},"name":"abi_encode_tuple_t_int64_t_uint256__to_t_int64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3207:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3218:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3226:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3237:4:8","type":""}],"src":"3121:259:8"},{"body":{"nodeType":"YulBlock","src":"3455:216:8","statements":[{"body":{"nodeType":"YulBlock","src":"3501:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3510:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3513:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3503:6:8"},"nodeType":"YulFunctionCall","src":"3503:12:8"},"nodeType":"YulExpressionStatement","src":"3503:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3476:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3472:3:8"},"nodeType":"YulFunctionCall","src":"3472:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"3497:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3468:3:8"},"nodeType":"YulFunctionCall","src":"3468:32:8"},"nodeType":"YulIf","src":"3465:52:8"},{"nodeType":"YulVariableDeclaration","src":"3526:36:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3552:9:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3539:12:8"},"nodeType":"YulFunctionCall","src":"3539:23:8"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3530:5:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"3625:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3634:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3637:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3627:6:8"},"nodeType":"YulFunctionCall","src":"3627:12:8"},"nodeType":"YulExpressionStatement","src":"3627:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3584:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3595:5:8"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3610:3:8","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3615:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3606:3:8"},"nodeType":"YulFunctionCall","src":"3606:11:8"},{"kind":"number","nodeType":"YulLiteral","src":"3619:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3602:3:8"},"nodeType":"YulFunctionCall","src":"3602:19:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3591:3:8"},"nodeType":"YulFunctionCall","src":"3591:31:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3581:2:8"},"nodeType":"YulFunctionCall","src":"3581:42:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3574:6:8"},"nodeType":"YulFunctionCall","src":"3574:50:8"},"nodeType":"YulIf","src":"3571:70:8"},{"nodeType":"YulAssignment","src":"3650:15:8","value":{"name":"value","nodeType":"YulIdentifier","src":"3660:5:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3650:6:8"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3421:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3432:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3444:6:8","type":""}],"src":"3385:286:8"},{"body":{"nodeType":"YulBlock","src":"3850:182:8","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3867:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3878:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:8"},"nodeType":"YulFunctionCall","src":"3860:21:8"},"nodeType":"YulExpressionStatement","src":"3860:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3901:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3912:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3897:3:8"},"nodeType":"YulFunctionCall","src":"3897:18:8"},{"kind":"number","nodeType":"YulLiteral","src":"3917:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3890:6:8"},"nodeType":"YulFunctionCall","src":"3890:30:8"},"nodeType":"YulExpressionStatement","src":"3890:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3940:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3951:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3936:3:8"},"nodeType":"YulFunctionCall","src":"3936:18:8"},{"hexValue":"4f6e6c79206465646963617465642067656c61746f206d73672e73656e646572","kind":"string","nodeType":"YulLiteral","src":"3956:34:8","type":"","value":"Only dedicated gelato msg.sender"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3929:6:8"},"nodeType":"YulFunctionCall","src":"3929:62:8"},"nodeType":"YulExpressionStatement","src":"3929:62:8"},{"nodeType":"YulAssignment","src":"4000:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4012:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"4023:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4008:3:8"},"nodeType":"YulFunctionCall","src":"4008:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4000:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_ffba76c61aba56c8855f6a59c6db903331497be413996129a935f4a57f92a5bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3827:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3841:4:8","type":""}],"src":"3676:356:8"},{"body":{"nodeType":"YulBlock","src":"4206:1032:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4216:12:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4226:2:8","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4220:2:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4237:32:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4255:9:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4266:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4251:3:8"},"nodeType":"YulFunctionCall","src":"4251:18:8"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4241:6:8","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4285:9:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4296:2:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4278:6:8"},"nodeType":"YulFunctionCall","src":"4278:21:8"},"nodeType":"YulExpressionStatement","src":"4278:21:8"},{"nodeType":"YulVariableDeclaration","src":"4308:17:8","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"4319:6:8"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4312:3:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4334:27:8","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4354:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4348:5:8"},"nodeType":"YulFunctionCall","src":"4348:13:8"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4338:6:8","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4377:6:8"},{"name":"length","nodeType":"YulIdentifier","src":"4385:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4370:6:8"},"nodeType":"YulFunctionCall","src":"4370:22:8"},"nodeType":"YulExpressionStatement","src":"4370:22:8"},{"nodeType":"YulAssignment","src":"4401:25:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4412:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4408:3:8"},"nodeType":"YulFunctionCall","src":"4408:18:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4401:3:8"}]},{"nodeType":"YulVariableDeclaration","src":"4435:53:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4457:9:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4472:1:8","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"4475:6:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4468:3:8"},"nodeType":"YulFunctionCall","src":"4468:14:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4453:3:8"},"nodeType":"YulFunctionCall","src":"4453:30:8"},{"kind":"number","nodeType":"YulLiteral","src":"4485:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4449:3:8"},"nodeType":"YulFunctionCall","src":"4449:39:8"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"4439:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4497:29:8","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4515:6:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4523:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4511:3:8"},"nodeType":"YulFunctionCall","src":"4511:15:8"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4501:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4535:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4544:1:8","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4539:1:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4554:12:8","value":{"name":"i","nodeType":"YulIdentifier","src":"4565:1:8"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"4558:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"4630:579:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4651:3:8"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4664:6:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"4672:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4660:3:8"},"nodeType":"YulFunctionCall","src":"4660:22:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4688:2:8","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4684:3:8"},"nodeType":"YulFunctionCall","src":"4684:7:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:8"},"nodeType":"YulFunctionCall","src":"4656:36:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4644:6:8"},"nodeType":"YulFunctionCall","src":"4644:49:8"},"nodeType":"YulExpressionStatement","src":"4644:49:8"},{"nodeType":"YulVariableDeclaration","src":"4706:23:8","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4722:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4716:5:8"},"nodeType":"YulFunctionCall","src":"4716:13:8"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4710:2:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4742:25:8","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4764:2:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4758:5:8"},"nodeType":"YulFunctionCall","src":"4758:9:8"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"4746:8:8","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4787:6:8"},{"name":"length_1","nodeType":"YulIdentifier","src":"4795:8:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4780:6:8"},"nodeType":"YulFunctionCall","src":"4780:24:8"},"nodeType":"YulExpressionStatement","src":"4780:24:8"},{"nodeType":"YulVariableDeclaration","src":"4817:12:8","value":{"name":"i","nodeType":"YulIdentifier","src":"4828:1:8"},"variables":[{"name":"i_2","nodeType":"YulTypedName","src":"4821:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"4904:95:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4937:6:8"},{"name":"i_2","nodeType":"YulIdentifier","src":"4945:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4933:3:8"},"nodeType":"YulFunctionCall","src":"4933:16:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4951:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4929:3:8"},"nodeType":"YulFunctionCall","src":"4929:25:8"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4970:2:8"},{"name":"i_2","nodeType":"YulIdentifier","src":"4974:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4966:3:8"},"nodeType":"YulFunctionCall","src":"4966:12:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4980:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4962:3:8"},"nodeType":"YulFunctionCall","src":"4962:21:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4956:5:8"},"nodeType":"YulFunctionCall","src":"4956:28:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4922:6:8"},"nodeType":"YulFunctionCall","src":"4922:63:8"},"nodeType":"YulExpressionStatement","src":"4922:63:8"}]},"condition":{"arguments":[{"name":"i_2","nodeType":"YulIdentifier","src":"4853:3:8"},{"name":"length_1","nodeType":"YulIdentifier","src":"4858:8:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4850:2:8"},"nodeType":"YulFunctionCall","src":"4850:17:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4868:23:8","statements":[{"nodeType":"YulAssignment","src":"4870:19:8","value":{"arguments":[{"name":"i_2","nodeType":"YulIdentifier","src":"4881:3:8"},{"name":"_1","nodeType":"YulIdentifier","src":"4886:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4877:3:8"},"nodeType":"YulFunctionCall","src":"4877:12:8"},"variableNames":[{"name":"i_2","nodeType":"YulIdentifier","src":"4870:3:8"}]}]},"pre":{"nodeType":"YulBlock","src":"4846:3:8","statements":[]},"src":"4842:157:8"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5027:6:8"},{"name":"length_1","nodeType":"YulIdentifier","src":"5035:8:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5023:3:8"},"nodeType":"YulFunctionCall","src":"5023:21:8"},{"name":"_1","nodeType":"YulIdentifier","src":"5046:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5019:3:8"},"nodeType":"YulFunctionCall","src":"5019:30:8"},{"name":"i","nodeType":"YulIdentifier","src":"5051:1:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5012:6:8"},"nodeType":"YulFunctionCall","src":"5012:41:8"},"nodeType":"YulExpressionStatement","src":"5012:41:8"},{"nodeType":"YulAssignment","src":"5066:63:8","value":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5084:6:8"},{"arguments":[{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"5100:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"5110:2:8","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5096:3:8"},"nodeType":"YulFunctionCall","src":"5096:17:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5119:2:8","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5115:3:8"},"nodeType":"YulFunctionCall","src":"5115:7:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5092:3:8"},"nodeType":"YulFunctionCall","src":"5092:31:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5080:3:8"},"nodeType":"YulFunctionCall","src":"5080:44:8"},{"name":"_1","nodeType":"YulIdentifier","src":"5126:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5076:3:8"},"nodeType":"YulFunctionCall","src":"5076:53:8"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5066:6:8"}]},{"nodeType":"YulAssignment","src":"5142:25:8","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5156:6:8"},{"name":"_1","nodeType":"YulIdentifier","src":"5164:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5152:3:8"},"nodeType":"YulFunctionCall","src":"5152:15:8"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5142:6:8"}]},{"nodeType":"YulAssignment","src":"5180:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5191:3:8"},{"name":"_1","nodeType":"YulIdentifier","src":"5196:2:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5187:3:8"},"nodeType":"YulFunctionCall","src":"5187:12:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5180:3:8"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"4586:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"4591:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4583:2:8"},"nodeType":"YulFunctionCall","src":"4583:15:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4599:22:8","statements":[{"nodeType":"YulAssignment","src":"4601:18:8","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"4612:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"4617:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:8"},"nodeType":"YulFunctionCall","src":"4608:11:8"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"4601:3:8"}]}]},"pre":{"nodeType":"YulBlock","src":"4579:3:8","statements":[]},"src":"4575:634:8"},{"nodeType":"YulAssignment","src":"5218:14:8","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"5226:6:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5218:4:8"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4175:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4186:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4197:4:8","type":""}],"src":"4037:1201:8"},{"body":{"nodeType":"YulBlock","src":"5324:103:8","statements":[{"body":{"nodeType":"YulBlock","src":"5370:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5379:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5382:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5372:6:8"},"nodeType":"YulFunctionCall","src":"5372:12:8"},"nodeType":"YulExpressionStatement","src":"5372:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5345:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"5354:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5341:3:8"},"nodeType":"YulFunctionCall","src":"5341:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"5366:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5337:3:8"},"nodeType":"YulFunctionCall","src":"5337:32:8"},"nodeType":"YulIf","src":"5334:52:8"},{"nodeType":"YulAssignment","src":"5395:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5411:9:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5405:5:8"},"nodeType":"YulFunctionCall","src":"5405:16:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5395:6:8"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5290:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5301:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5313:6:8","type":""}],"src":"5243:184:8"},{"body":{"nodeType":"YulBlock","src":"5533:76:8","statements":[{"nodeType":"YulAssignment","src":"5543:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5555:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5566:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:8"},"nodeType":"YulFunctionCall","src":"5551:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5543:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5585:9:8"},{"name":"value0","nodeType":"YulIdentifier","src":"5596:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5578:6:8"},"nodeType":"YulFunctionCall","src":"5578:25:8"},"nodeType":"YulExpressionStatement","src":"5578:25:8"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5502:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5513:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5524:4:8","type":""}],"src":"5432:177:8"},{"body":{"nodeType":"YulBlock","src":"5717:831:8","statements":[{"body":{"nodeType":"YulBlock","src":"5764:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5773:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5776:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5766:6:8"},"nodeType":"YulFunctionCall","src":"5766:12:8"},"nodeType":"YulExpressionStatement","src":"5766:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5738:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"5747:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5734:3:8"},"nodeType":"YulFunctionCall","src":"5734:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"5759:3:8","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5730:3:8"},"nodeType":"YulFunctionCall","src":"5730:33:8"},"nodeType":"YulIf","src":"5727:53:8"},{"nodeType":"YulVariableDeclaration","src":"5789:23:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5809:2:8","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5803:5:8"},"nodeType":"YulFunctionCall","src":"5803:9:8"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5793:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5821:34:8","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5843:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"5851:3:8","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5839:3:8"},"nodeType":"YulFunctionCall","src":"5839:16:8"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5825:10:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5864:28:8","value":{"kind":"number","nodeType":"YulLiteral","src":"5874:18:8","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5868:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"5951:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5953:16:8"},"nodeType":"YulFunctionCall","src":"5953:18:8"},"nodeType":"YulExpressionStatement","src":"5953:18:8"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5910:10:8"},{"name":"_1","nodeType":"YulIdentifier","src":"5922:2:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5907:2:8"},"nodeType":"YulFunctionCall","src":"5907:18:8"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5930:10:8"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5942:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5927:2:8"},"nodeType":"YulFunctionCall","src":"5927:22:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5904:2:8"},"nodeType":"YulFunctionCall","src":"5904:46:8"},"nodeType":"YulIf","src":"5901:72:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5989:2:8","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5993:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5982:6:8"},"nodeType":"YulFunctionCall","src":"5982:22:8"},"nodeType":"YulExpressionStatement","src":"5982:22:8"},{"nodeType":"YulVariableDeclaration","src":"6013:29:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6032:9:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6026:5:8"},"nodeType":"YulFunctionCall","src":"6026:16:8"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6017:5:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"6094:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6103:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6106:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6096:6:8"},"nodeType":"YulFunctionCall","src":"6096:12:8"},"nodeType":"YulExpressionStatement","src":"6096:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6064:5:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6082:1:8","type":"","value":"7"},{"name":"value","nodeType":"YulIdentifier","src":"6085:5:8"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"6071:10:8"},"nodeType":"YulFunctionCall","src":"6071:20:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6061:2:8"},"nodeType":"YulFunctionCall","src":"6061:31:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6054:6:8"},"nodeType":"YulFunctionCall","src":"6054:39:8"},"nodeType":"YulIf","src":"6051:59:8"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6126:6:8"},{"name":"value","nodeType":"YulIdentifier","src":"6134:5:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6119:6:8"},"nodeType":"YulFunctionCall","src":"6119:21:8"},"nodeType":"YulExpressionStatement","src":"6119:21:8"},{"nodeType":"YulVariableDeclaration","src":"6149:40:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6174:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6185:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6170:3:8"},"nodeType":"YulFunctionCall","src":"6170:18:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6164:5:8"},"nodeType":"YulFunctionCall","src":"6164:25:8"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6153:7:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"6239:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6248:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6251:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6241:6:8"},"nodeType":"YulFunctionCall","src":"6241:12:8"},"nodeType":"YulExpressionStatement","src":"6241:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6211:7:8"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6224:7:8"},{"name":"_1","nodeType":"YulIdentifier","src":"6233:2:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6220:3:8"},"nodeType":"YulFunctionCall","src":"6220:16:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6208:2:8"},"nodeType":"YulFunctionCall","src":"6208:29:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6201:6:8"},"nodeType":"YulFunctionCall","src":"6201:37:8"},"nodeType":"YulIf","src":"6198:57:8"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6275:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"6283:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6271:3:8"},"nodeType":"YulFunctionCall","src":"6271:15:8"},{"name":"value_1","nodeType":"YulIdentifier","src":"6288:7:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6264:6:8"},"nodeType":"YulFunctionCall","src":"6264:32:8"},"nodeType":"YulExpressionStatement","src":"6264:32:8"},{"nodeType":"YulVariableDeclaration","src":"6305:40:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6330:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6341:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6326:3:8"},"nodeType":"YulFunctionCall","src":"6326:18:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6320:5:8"},"nodeType":"YulFunctionCall","src":"6320:25:8"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"6309:7:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"6401:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6410:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6413:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6403:6:8"},"nodeType":"YulFunctionCall","src":"6403:12:8"},"nodeType":"YulExpressionStatement","src":"6403:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6367:7:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6387:1:8","type":"","value":"3"},{"name":"value_2","nodeType":"YulIdentifier","src":"6390:7:8"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"6376:10:8"},"nodeType":"YulFunctionCall","src":"6376:22:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6364:2:8"},"nodeType":"YulFunctionCall","src":"6364:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6357:6:8"},"nodeType":"YulFunctionCall","src":"6357:43:8"},"nodeType":"YulIf","src":"6354:63:8"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6437:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"6445:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6433:3:8"},"nodeType":"YulFunctionCall","src":"6433:15:8"},{"name":"value_2","nodeType":"YulIdentifier","src":"6450:7:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6426:6:8"},"nodeType":"YulFunctionCall","src":"6426:32:8"},"nodeType":"YulExpressionStatement","src":"6426:32:8"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6478:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"6486:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6474:3:8"},"nodeType":"YulFunctionCall","src":"6474:15:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6501:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6512:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6497:3:8"},"nodeType":"YulFunctionCall","src":"6497:18:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6491:5:8"},"nodeType":"YulFunctionCall","src":"6491:25:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6467:6:8"},"nodeType":"YulFunctionCall","src":"6467:50:8"},"nodeType":"YulExpressionStatement","src":"6467:50:8"},{"nodeType":"YulAssignment","src":"6526:16:8","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6536:6:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6526:6:8"}]}]},"name":"abi_decode_tuple_t_struct$_Price_$643_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5683:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5694:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5706:6:8","type":""}],"src":"5614:934:8"},{"body":{"nodeType":"YulBlock","src":"6744:14:8","statements":[{"nodeType":"YulAssignment","src":"6746:10:8","value":{"name":"pos","nodeType":"YulIdentifier","src":"6753:3:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6746:3:8"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6728:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6736:3:8","type":""}],"src":"6553:205:8"},{"body":{"nodeType":"YulBlock","src":"6937:228:8","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6954:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6965:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6947:6:8"},"nodeType":"YulFunctionCall","src":"6947:21:8"},"nodeType":"YulExpressionStatement","src":"6947:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6988:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6999:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6984:3:8"},"nodeType":"YulFunctionCall","src":"6984:18:8"},{"kind":"number","nodeType":"YulLiteral","src":"7004:2:8","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6977:6:8"},"nodeType":"YulFunctionCall","src":"6977:30:8"},"nodeType":"YulExpressionStatement","src":"6977:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7027:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7038:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7023:3:8"},"nodeType":"YulFunctionCall","src":"7023:18:8"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"7043:34:8","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7016:6:8"},"nodeType":"YulFunctionCall","src":"7016:62:8"},"nodeType":"YulExpressionStatement","src":"7016:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7098:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7109:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:8"},"nodeType":"YulFunctionCall","src":"7094:18:8"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"7114:8:8","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7087:6:8"},"nodeType":"YulFunctionCall","src":"7087:36:8"},"nodeType":"YulExpressionStatement","src":"7087:36:8"},{"nodeType":"YulAssignment","src":"7132:27:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7144:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7155:3:8","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7140:3:8"},"nodeType":"YulFunctionCall","src":"7140:19:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7132:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6914:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6928:4:8","type":""}],"src":"6763:402:8"},{"body":{"nodeType":"YulBlock","src":"7344:182:8","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7361:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7372:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7354:6:8"},"nodeType":"YulFunctionCall","src":"7354:21:8"},"nodeType":"YulExpressionStatement","src":"7354:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7395:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7406:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7391:3:8"},"nodeType":"YulFunctionCall","src":"7391:18:8"},{"kind":"number","nodeType":"YulLiteral","src":"7411:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7384:6:8"},"nodeType":"YulFunctionCall","src":"7384:30:8"},"nodeType":"YulExpressionStatement","src":"7384:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7434:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7445:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7430:3:8"},"nodeType":"YulFunctionCall","src":"7430:18:8"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7450:34:8","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7423:6:8"},"nodeType":"YulFunctionCall","src":"7423:62:8"},"nodeType":"YulExpressionStatement","src":"7423:62:8"},{"nodeType":"YulAssignment","src":"7494:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7506:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7517:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7502:3:8"},"nodeType":"YulFunctionCall","src":"7502:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7494:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7321:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7335:4:8","type":""}],"src":"7170:356:8"},{"body":{"nodeType":"YulBlock","src":"7705:170:8","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7722:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7733:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7715:6:8"},"nodeType":"YulFunctionCall","src":"7715:21:8"},"nodeType":"YulExpressionStatement","src":"7715:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7756:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7767:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7752:3:8"},"nodeType":"YulFunctionCall","src":"7752:18:8"},{"kind":"number","nodeType":"YulLiteral","src":"7772:2:8","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7745:6:8"},"nodeType":"YulFunctionCall","src":"7745:30:8"},"nodeType":"YulExpressionStatement","src":"7745:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7795:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7806:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7791:3:8"},"nodeType":"YulFunctionCall","src":"7791:18:8"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"7811:22:8","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7784:6:8"},"nodeType":"YulFunctionCall","src":"7784:50:8"},"nodeType":"YulExpressionStatement","src":"7784:50:8"},{"nodeType":"YulAssignment","src":"7843:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7855:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"7866:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7851:3:8"},"nodeType":"YulFunctionCall","src":"7851:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7843:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7682:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7696:4:8","type":""}],"src":"7531:344:8"},{"body":{"nodeType":"YulBlock","src":"8054:166:8","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8071:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8082:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8064:6:8"},"nodeType":"YulFunctionCall","src":"8064:21:8"},"nodeType":"YulExpressionStatement","src":"8064:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8105:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8116:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8101:3:8"},"nodeType":"YulFunctionCall","src":"8101:18:8"},{"kind":"number","nodeType":"YulLiteral","src":"8121:2:8","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8094:6:8"},"nodeType":"YulFunctionCall","src":"8094:30:8"},"nodeType":"YulExpressionStatement","src":"8094:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8144:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8155:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8140:3:8"},"nodeType":"YulFunctionCall","src":"8140:18:8"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"8160:18:8","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8133:6:8"},"nodeType":"YulFunctionCall","src":"8133:46:8"},"nodeType":"YulExpressionStatement","src":"8133:46:8"},{"nodeType":"YulAssignment","src":"8188:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8200:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8211:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8196:3:8"},"nodeType":"YulFunctionCall","src":"8196:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8188:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8031:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8045:4:8","type":""}],"src":"7880:340:8"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        let _4 := 0x1f\n        if iszero(slt(add(_3, _4), dataEnd)) { revert(0, 0) }\n        let _5 := calldataload(_3)\n        if gt(_5, _2) { panic_error_0x41() }\n        let _6 := shl(5, _5)\n        let dst := allocate_memory(add(_6, _1))\n        let dst_1 := dst\n        mstore(dst, _5)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, _6), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _2)\n            {\n                let _7 := 0\n                revert(_7, _7)\n            }\n            let _8 := add(_3, innerOffset)\n            if iszero(slt(add(_8, 63), dataEnd))\n            {\n                let _9 := 0\n                revert(_9, _9)\n            }\n            let _10 := calldataload(add(_8, _1))\n            let _11 := 64\n            if gt(_10, _2) { panic_error_0x41() }\n            let array := allocate_memory(add(and(add(_10, _4), not(31)), _1))\n            mstore(array, _10)\n            if gt(add(add(_8, _10), _11), dataEnd)\n            {\n                let _12 := 0\n                revert(_12, _12)\n            }\n            calldatacopy(add(array, _1), add(_8, _11), _10)\n            mstore(add(add(array, _10), _1), 0)\n            mstore(dst, array)\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_struct$_Price_$349_memory_ptr__to_t_struct$_Price_$349_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, signextend(7, mload(value0)))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n    }\n    function abi_encode_tuple_t_int64_t_uint256__to_t_int64_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, signextend(7, value0))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_ffba76c61aba56c8855f6a59c6db903331497be413996129a935f4a57f92a5bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Only dedicated gelato msg.sender\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        let i_1 := i\n        for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _2 := mload(srcPtr)\n            let length_1 := mload(_2)\n            mstore(tail_2, length_1)\n            let i_2 := i\n            for { } lt(i_2, length_1) { i_2 := add(i_2, _1) }\n            {\n                mstore(add(add(tail_2, i_2), _1), mload(add(add(_2, i_2), _1)))\n            }\n            mstore(add(add(tail_2, length_1), _1), i)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), not(31))), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_struct$_Price_$643_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 128)\n        let _1 := 0xffffffffffffffff\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let value := mload(headStart)\n        if iszero(eq(value, signextend(7, value))) { revert(0, 0) }\n        mstore(memPtr, value)\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, _1))) { revert(0, 0) }\n        mstore(add(memPtr, 32), value_1)\n        let value_2 := mload(add(headStart, 64))\n        if iszero(eq(value_2, signextend(3, value_2))) { revert(0, 0) }\n        mstore(add(memPtr, 64), value_2)\n        mstore(add(memPtr, 96), mload(add(headStart, 96)))\n        value0 := memPtr\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n}","id":8,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"344":[{"length":32,"start":592},{"length":32,"start":669}]},"linkReferences":{},"object":"6080604052600436106100ab5760003560e01c80638456cb59116100645780638456cb59146101715780638da5cb5b1461018657806398d5fdca146101b85780639d1b464a14610206578063c54430821461023e578063f2fde38b1461027257600080fd5b80632592c0bf146100b75780633ccfd60b146100d95780633f4ba83a146101035780635c975abb14610118578063714cff5614610137578063715018a61461015c57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d23660046107f1565b610292565b005b3480156100e557600080fd5b506100ee6104c4565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b506100d761051e565b34801561012457600080fd5b50600054600160a01b900460ff166100ee565b34801561014357600080fd5b5060025461014e9081565b6040519081526020016100fa565b34801561016857600080fd5b506100d7610530565b34801561017d57600080fd5b506100d7610542565b34801561019257600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100fa565b3480156101c457600080fd5b5060408051808201825260008082526020918201528151808301835260035460070b8082526004549183019182528351908152905191810191909152016100fa565b34801561021257600080fd5b506003546004546102249160070b9082565b6040805160079390930b83526020830191909152016100fa565b34801561024a57600080fd5b506101a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b506100d761028d36600461090a565b610552565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206465646963617465642067656c61746f206d73672e73656e64657260448201526064015b60405180910390fd5b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061034090859060040161093a565b602060405180830381865afa15801561035d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038191906109cc565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e289083906103b490869060040161093a565b6000604051808303818588803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b50506001546040516331d98b3f60e01b81527fca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6600482018190529450600093506001600160a01b0390911691506331d98b3f90602401608060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047891906109e5565b604080518082019091528151600781900b825260609092015160209091018190526003805467ffffffffffffffff191667ffffffffffffffff9093169290921790915560045550505050565b60006104ce6105cb565b604051600090339047908381818185875af1925050503d8060008114610510576040519150601f19603f3d011682016040523d82523d6000602084013e610515565b606091505b50909250505090565b6105266105cb565b61052e610625565b565b6105386105cb565b61052e600061067a565b61054a6105cb565b61052e6106ca565b61055a6105cb565b6001600160a01b0381166105bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610306565b6105c88161067a565b50565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b61062d61070d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106d261075d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861065d3390565b600054600160a01b900460ff1661052e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610306565b600054600160a01b900460ff161561052e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610306565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e9576107e96107aa565b604052919050565b6000602080838503121561080457600080fd5b823567ffffffffffffffff8082111561081c57600080fd5b8185019150601f868184011261083157600080fd5b823582811115610843576108436107aa565b8060051b6108528682016107c0565b918252848101860191868101908a84111561086c57600080fd5b87870192505b838310156108fc5782358681111561088a5760008081fd5b8701603f81018c1361089c5760008081fd5b888101356040888211156108b2576108b26107aa565b6108c3828901601f19168c016107c0565b8281528e828486010111156108d85760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610872565b9a9950505050505050505050565b60006020828403121561091c57600080fd5b81356001600160a01b038116811461093357600080fd5b9392505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156109be57888603603f1901855282518051808852835b81811015610997578281018a01518982018b0152890161097c565b508781018901849052601f01601f1916909601870195509386019391860191600101610962565b509398975050505050505050565b6000602082840312156109de57600080fd5b5051919050565b6000608082840312156109f757600080fd5b6040516080810167ffffffffffffffff8282108183111715610a1b57610a1b6107aa565b81604052845191508160070b8214610a3257600080fd5b9082526020840151908082168214610a4957600080fd5b5060208201526040830151600381900b8114610a6457600080fd5b6040820152606092830151928101929092525091905056fea264697066735822122043a2e9477dd76c58033e3a0e3c5b332ae16f570f315171b23d6061f55502fe4864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x9D1B464A EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xC5443082 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2592C0BF EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x714CFF56 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xB2 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7F1 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x4C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x51E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x14E SWAP1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x530 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x542 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x3 SLOAD PUSH1 0x7 SIGNEXTEND DUP1 DUP3 MSTORE PUSH1 0x4 SLOAD SWAP2 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH2 0x224 SWAP2 PUSH1 0x7 SIGNEXTEND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x7 SWAP4 SWAP1 SWAP4 SIGNEXTEND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A0 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x90A JUMP JUMPDEST PUSH2 0x552 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x30F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206465646963617465642067656C61746F206D73672E73656E646572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD47EED45 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xD47EED45 SWAP1 PUSH2 0x340 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x93A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1DF3CBC5 PUSH1 0xE3 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF9E5E28 SWAP1 DUP4 SWAP1 PUSH2 0x3B4 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x93A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31D98B3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0xCA80BA6DC32E08D06F1AA886011EED1D77C77BE9EB761CC10D72B7D0A2FD57A6 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP5 POP PUSH1 0x0 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x31D98B3F SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x454 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x478 SWAP2 SWAP1 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND DUP3 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CE PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x510 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x515 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x526 PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH2 0x625 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x538 PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH1 0x0 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x54A PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x52E PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x55A PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x306 JUMP JUMPDEST PUSH2 0x5C8 DUP2 PUSH2 0x67A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x70D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x6D2 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x65D CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x52E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x306 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7E9 JUMPI PUSH2 0x7E9 PUSH2 0x7AA JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP PUSH1 0x1F DUP7 DUP2 DUP5 ADD SLT PUSH2 0x831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x843 JUMPI PUSH2 0x843 PUSH2 0x7AA JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x852 DUP7 DUP3 ADD PUSH2 0x7C0 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP5 DUP2 ADD DUP7 ADD SWAP2 DUP7 DUP2 ADD SWAP1 DUP11 DUP5 GT ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x8FC JUMPI DUP3 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP8 ADD PUSH1 0x3F DUP2 ADD DUP13 SGT PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP9 DUP3 GT ISZERO PUSH2 0x8B2 JUMPI PUSH2 0x8B2 PUSH2 0x7AA JUMP JUMPDEST PUSH2 0x8C3 DUP3 DUP10 ADD PUSH1 0x1F NOT AND DUP13 ADD PUSH2 0x7C0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP15 DUP3 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x8D8 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP3 DUP3 DUP6 ADD DUP14 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD DUP13 ADD SWAP3 SWAP1 SWAP3 MSTORE POP DUP4 MSTORE POP SWAP2 DUP8 ADD SWAP2 SWAP1 DUP8 ADD SWAP1 PUSH2 0x872 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9BE JUMPI DUP9 DUP7 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP3 MLOAD DUP1 MLOAD DUP1 DUP9 MSTORE DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI DUP3 DUP2 ADD DUP11 ADD MLOAD DUP10 DUP3 ADD DUP12 ADD MSTORE DUP10 ADD PUSH2 0x97C JUMP JUMPDEST POP DUP8 DUP2 ADD DUP10 ADD DUP5 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP7 ADD DUP8 ADD SWAP6 POP SWAP4 DUP7 ADD SWAP4 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x962 JUMP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0xA1B JUMPI PUSH2 0xA1B PUSH2 0x7AA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0x7 SIGNEXTEND DUP3 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 DUP5 ADD MLOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0xA49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0xA64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG2 0xE9 SELFBALANCE PUSH30 0xD76C58033E3A0E3C5B332AE16F570F315171B23D6061F55502FE4864736F PUSH13 0x63430008110033000000000000 ","sourceMap":"363:1597:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;822:495;;;;;;;;;;-1:-1:-1;822:495:4;;;;;:::i;:::-;;:::i;:::-;;1766:192;;;;;;;;;;;;;:::i;:::-;;;2393:14:8;;2386:22;2368:41;;2356:2;2341:18;1766:192:4;;;;;;;;1660:65;;;;;;;;;;;;;:::i;1615:84:1:-;;;;;;;;;;-1:-1:-1;1662:4:1;1685:7;-1:-1:-1;;;1685:7:1;;;;1615:84;;468:32:4;;;;;;;;;;-1:-1:-1;468:32:4;;;;;;;;;2566:25:8;;;2554:2;2539:18;468:32:4;2420:177:8;1824:101:0;;;;;;;;;;;;;:::i;1593:61:4:-;;;;;;;;;;;;;:::i;1201:85:0:-;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;2766:32:8;;;2748:51;;2736:2;2721:18;1201:85:0;2602:203:8;1323:91:4;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;1388:19:4;;;;;;;1395:12;1388:19;;;;;;;;;;;;;;1323:91;;3000:47:8;;;3085:24;;3063:20;;;3056:54;;;;2973:18;1323:91:4;2810:306:8;637:25:4;;;;;;;;;;-1:-1:-1;637:25:4;;;;;;;;;;;;;;;3320:1:8;3309:21;;;;3291:40;;3362:2;3347:18;;3340:34;;;;3264:18;637:25:4;3121:259:8;506:40:4;;;;;;;;;;;;;;;2074:198:0;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;822:495:4:-;1482:10;-1:-1:-1;;;;;1496:15:4;1482:29;;1461:108;;;;-1:-1:-1;;;1461:108:4;;3878:2:8;1461:108:4;;;3860:21:8;;;3897:18;;;3890:30;3956:34;3936:18;;;3929:62;4008:18;;1461:108:4;;;;;;;;;942:4:::1;::::0;:34:::1;::::0;-1:-1:-1;;;942:34:4;;928:11:::1;::::0;-1:-1:-1;;;;;942:4:4::1;::::0;:17:::1;::::0;:34:::1;::::0;960:15;;942:34:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;987:4;::::0;:50:::1;::::0;-1:-1:-1;;;987:50:4;;928:48;;-1:-1:-1;;;;;;987:4:4::1;::::0;:21:::1;::::0;928:48;;987:50:::1;::::0;1021:15;;987:50:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;1213:4:4::1;::::0;:22:::1;::::0;-1:-1:-1;;;1213:22:4;;1087:66:::1;1213:22;::::0;::::1;2566:25:8::0;;;1087:66:4;-1:-1:-1;1048:15:4::1;::::0;-1:-1:-1;;;;;;1213:4:4;;::::1;::::0;-1:-1:-1;1213:13:4::1;::::0;2539:18:8;;1213:22:4::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1261:49;::::0;;;;::::1;::::0;;;1267:17;;1261:49:::1;::::0;;::::1;::::0;;1286:23:::1;::::0;;::::1;::::0;1261:49:::1;::::0;;::::1;::::0;;;1246:12:::1;:64:::0;;-1:-1:-1;;1246:64:4::1;;::::0;;;;;;::::1;::::0;;;;;-1:-1:-1;;;;822:495:4:o;1766:192::-;1814:4;1094:13:0;:11;:13::i;:::-;1848:80:4::1;::::0;1831:11:::1;::::0;1856:10:::1;::::0;1893:21:::1;::::0;1831:11;1848:80;1831:11;1848:80;1893:21;1856:10;1848:80:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;1830:98:4;;-1:-1:-1;;;1766:192:4;:::o;1660:65::-;1094:13:0;:11;:13::i;:::-;1708:10:4::1;:8;:10::i;:::-;1660:65::o:0;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;1593:61:4:-:0;1094:13:0;:11;:13::i;:::-;1639:8:4::1;:6;:8::i;2074:198:0:-:0;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;6965:2:8;2154:73:0::1;::::0;::::1;6947:21:8::0;7004:2;6984:18;;;6977:30;7043:34;7023:18;;;7016:62;-1:-1:-1;;;7094:18:8;;;7087:36;7140:19;;2154:73:0::1;6763:402:8::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:2;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;7372:2:8;1414:68:0;;;7354:21:8;;;7391:18;;;7384:30;7450:34;7430:18;;;7423:62;7502:18;;1414:68:0;7170:356:8;2433:117:1;1486:16;:14;:16::i;:::-;2501:5:::1;2491:15:::0;;-1:-1:-1;;;;2491:15:1::1;::::0;;2521:22:::1;719:10:2::0;2530:12:1::1;2521:22;::::0;-1:-1:-1;;;;;2766:32:8;;;2748:51;;2736:2;2721:18;2521:22:1::1;;;;;;;2433:117::o:0;2426:187:0:-;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;2186:115:1:-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;;;2245:14:1::1;-1:-1:-1::0;;;2245:14:1::1;::::0;;2274:20:::1;2281:12;719:10:2::0;;640:96;1945:106:1;1662:4;1685:7;-1:-1:-1;;;1685:7:1;;;;2003:41;;;;-1:-1:-1;;;2003:41:1;;7733:2:8;2003:41:1;;;7715:21:8;7772:2;7752:18;;;7745:30;-1:-1:-1;;;7791:18:8;;;7784:50;7851:18;;2003:41:1;7531:344:8;1767:106:1;1662:4;1685:7;-1:-1:-1;;;1685:7:1;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:1;;8082:2:8;1828:38:1;;;8064:21:8;8121:2;8101:18;;;8094:30;-1:-1:-1;;;8140:18:8;;;8133:46;8196:18;;1828:38:1;7880:340:8;14:127;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:8;247:40;;317:18;302:34;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:8:o;426:1797::-;519:6;550:2;593;581:9;572:7;568:23;564:32;561:52;;;609:1;606;599:12;561:52;649:9;636:23;678:18;719:2;711:6;708:14;705:34;;;735:1;732;725:12;705:34;773:6;762:9;758:22;748:32;;799:4;839:7;834:2;830;826:11;822:25;812:53;;861:1;858;851:12;812:53;897:2;884:16;919:2;915;912:10;909:36;;;925:18;;:::i;:::-;971:2;968:1;964:10;994:28;1018:2;1014;1010:11;994:28;:::i;:::-;1056:15;;;1126:11;;;1122:20;;;1087:12;;;;1154:19;;;1151:39;;;1186:1;1183;1176:12;1151:39;1218:2;1214;1210:11;1199:22;;1230:963;1246:6;1241:3;1238:15;1230:963;;;1332:3;1319:17;1368:2;1355:11;1352:19;1349:109;;;1412:1;1441:2;1437;1430:14;1349:109;1481:20;;1536:2;1528:11;;1524:25;-1:-1:-1;1514:123:8;;1591:1;1620:2;1616;1609:14;1514:123;1682:2;1678;1674:11;1661:25;1710:2;1736;1731:3;1728:11;1725:37;;;1742:18;;:::i;:::-;1788:52;1812:12;;;-1:-1:-1;;1808:26:8;1804:35;;1788:52;:::i;:::-;1867:3;1860:5;1853:18;1914:7;1908:3;1902;1898:2;1894:12;1890:22;1887:35;1884:128;;;1964:1;1994:3;1989;1982:16;1884:128;2068:3;2062;2058:2;2054:12;2049:2;2042:5;2038:14;2025:47;2118:1;2096:15;;;2092:24;;2085:35;;;;-1:-1:-1;2133:18:8;;-1:-1:-1;1263:12:8;;;;2171;;;;1230:963;;;2212:5;426:1797;-1:-1:-1;;;;;;;;;;426:1797:8:o;3385:286::-;3444:6;3497:2;3485:9;3476:7;3472:23;3468:32;3465:52;;;3513:1;3510;3503:12;3465:52;3539:23;;-1:-1:-1;;;;;3591:31:8;;3581:42;;3571:70;;3637:1;3634;3627:12;3571:70;3660:5;3385:286;-1:-1:-1;;;3385:286:8:o;4037:1201::-;4197:4;4226:2;4266;4255:9;4251:18;4296:2;4285:9;4278:21;4319:6;4354;4348:13;4385:6;4377;4370:22;4423:2;4412:9;4408:18;4401:25;;4485:2;4475:6;4472:1;4468:14;4457:9;4453:30;4449:39;4435:53;;4523:2;4515:6;4511:15;4544:1;4565;4575:634;4591:6;4586:3;4583:15;4575:634;;;4660:22;;;-1:-1:-1;;4656:36:8;4644:49;;4716:13;;4758:9;;4780:24;;;4828:1;4842:157;4858:8;4853:3;4850:17;4842:157;;;4966:12;;;4962:21;;4956:28;4933:16;;;4929:25;;4922:63;4877:12;;4842:157;;;-1:-1:-1;5023:21:8;;;5019:30;;5012:41;;;5119:2;5096:17;-1:-1:-1;;5092:31:8;5080:44;;;5076:53;;;-1:-1:-1;5187:12:8;;;;5152:15;;;;4617:1;4608:11;4575:634;;;-1:-1:-1;5226:6:8;;4037:1201;-1:-1:-1;;;;;;;;4037:1201:8:o;5243:184::-;5313:6;5366:2;5354:9;5345:7;5341:23;5337:32;5334:52;;;5382:1;5379;5372:12;5334:52;-1:-1:-1;5405:16:8;;5243:184;-1:-1:-1;5243:184:8:o;5614:934::-;5706:6;5759:3;5747:9;5738:7;5734:23;5730:33;5727:53;;;5776:1;5773;5766:12;5727:53;5809:2;5803:9;5851:3;5843:6;5839:16;5874:18;5942:6;5930:10;5927:22;5922:2;5910:10;5907:18;5904:46;5901:72;;;5953:18;;:::i;:::-;5993:10;5989:2;5982:22;6032:9;6026:16;6013:29;;6085:5;6082:1;6071:20;6064:5;6061:31;6051:59;;6106:1;6103;6096:12;6051:59;6119:21;;;6185:2;6170:18;;6164:25;;6220:16;;;6208:29;;6198:57;;6251:1;6248;6241:12;6198:57;-1:-1:-1;6283:2:8;6271:15;;6264:32;6341:2;6326:18;;6320:25;6387:1;6376:22;;;6364:35;;6354:63;;6413:1;6410;6403:12;6354:63;6445:2;6433:15;;6426:32;6512:2;6497:18;;;6491:25;6474:15;;;6467:50;;;;-1:-1:-1;6437:6:8;5614:934;-1:-1:-1;5614:934:8:o"},"gasEstimates":{"creation":{"codeDepositCost":"547600","executionCost":"infinite","totalCost":"infinite"},"external":{"currentPrice()":"4516","gelatoMsgSender()":"infinite","getPrice()":"4573","owner()":"2342","pause()":"infinite","paused()":"2377","renounceOwnership()":"infinite","tokenIds()":"2387","transferOwnership(address)":"28408","unpause()":"infinite","updatePrice(bytes[])":"infinite","withdraw()":"infinite"}},"methodIdentifiers":{"currentPrice()":"9d1b464a","gelatoMsgSender()":"c5443082","getPrice()":"98d5fdca","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","renounceOwnership()":"715018a6","tokenIds()":"714cff56","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","updatePrice(bytes[])":"2592c0bf","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoMsgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updatePriceData\",\"type\":\"bytes[]\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartOracle.sol\":\"SmartOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/SmartOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {IPyth} from \\\"./lens/IPyth.sol\\\";\\n\\nimport {PythStructs} from \\\"./lens/PythStructs.sol\\\";\\n\\ncontract SmartOracle is Ownable, Pausable {\\n    IPyth pyth;\\n    using Counters for Counters.Counter;\\n    Counters.Counter public tokenIds;\\n    address public immutable gelatoMsgSender;\\n\\n    struct Price {\\n        int64 price;\\n        uint256 lastUpdateTimestamp;\\n    }\\n\\n    Price public currentPrice;\\n\\n    constructor(address _gelatoMsgSender, address pythContract) {\\n        gelatoMsgSender = _gelatoMsgSender;\\n        pyth = IPyth(pythContract);\\n    }\\n\\n    function updatePrice(\\n        bytes[] memory updatePriceData\\n    ) external onlyGelatoMsgSender {\\n        uint256 fee = pyth.getUpdateFee(updatePriceData);\\n\\n        pyth.updatePriceFeeds{value: fee}(updatePriceData);\\n\\n        bytes32 priceID = bytes32(\\n            0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6\\n        );\\n\\n        PythStructs.Price memory check_price = pyth.getPrice(priceID);\\n\\n        currentPrice = Price(check_price.price, check_price.publishTime);\\n    }\\n\\n    function getPrice() public view returns (Price memory) {\\n        return currentPrice;\\n    }\\n\\n    modifier onlyGelatoMsgSender() {\\n        require(\\n            msg.sender == gelatoMsgSender,\\n            \\\"Only dedicated gelato msg.sender\\\"\\n        );\\n        _;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner returns (bool) {\\n        (bool result, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x463b6c53c16023394104012a6b701d211410bbbc0fabc6b71690d91c125eb752\",\"license\":\"MIT\"},\"contracts/lens/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"contracts/lens/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"contracts/lens/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":130,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":335,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"pyth","offset":0,"slot":"1","type":"t_contract(IPyth)610"},{"astId":342,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"tokenIds","offset":0,"slot":"2","type":"t_struct(Counter)248_storage"},{"astId":352,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"currentPrice","offset":0,"slot":"3","type":"t_struct(Price)349_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IPyth)610":{"encoding":"inplace","label":"contract IPyth","numberOfBytes":"20"},"t_int64":{"encoding":"inplace","label":"int64","numberOfBytes":"8"},"t_struct(Counter)248_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":247,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Price)349_storage":{"encoding":"inplace","label":"struct SmartOracle.Price","members":[{"astId":346,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"price","offset":0,"slot":"0","type":"t_int64"},{"astId":348,"contract":"contracts/SmartOracle.sol:SmartOracle","label":"lastUpdateTimestamp","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lens/IPyth.sol":{"IPyth":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getEmaPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"getUpdateFee","outputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getValidTimePeriod","outputs":[{"internalType":"uint256","name":"validTimePeriod","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"name":"parsePriceFeedUpdates","outputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple"}],"internalType":"struct PythStructs.PriceFeed[]","name":"priceFeeds","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"updatePriceFeeds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64[]","name":"publishTimes","type":"uint64[]"}],"name":"updatePriceFeedsIfNecessary","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"author":"Pyth Data Association","details":"Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.","kind":"dev","methods":{"getEmaPrice(bytes32)":{"details":"Reverts if the EMA price is not available.","params":{"id":"The Pyth Price Feed ID of which to fetch the EMA price and confidence interval."},"returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getEmaPriceNoOlderThan(bytes32,uint256)":{"details":"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getEmaPriceUnsafe(bytes32)":{"details":"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getPrice(bytes32)":{"details":"Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.","params":{"id":"The Pyth Price Feed ID of which to fetch the price and confidence interval."},"returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getPriceNoOlderThan(bytes32,uint256)":{"details":"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getPriceUnsafe(bytes32)":{"details":"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getUpdateFee(bytes[])":{"params":{"updateData":"Array of price update data."},"returns":{"feeAmount":"The required fee in Wei."}},"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":{"details":"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.","params":{"maxPublishTime":"maximum acceptable publishTime for the given `priceIds`.","minPublishTime":"minimum acceptable publishTime for the given `priceIds`.","priceIds":"Array of price ids.","updateData":"Array of price update data."},"returns":{"priceFeeds":"Array of the price feeds corresponding to the given `priceIds` (with the same order)."}},"updatePriceFeeds(bytes[])":{"details":"Reverts if the transferred fee is not sufficient or the updateData is invalid.","params":{"updateData":"Array of price update data."}},"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":{"details":"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.","params":{"priceIds":"Array of price ids.","publishTimes":"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`","updateData":"Array of price update data."}}},"title":"Consume prices from the Pyth Network (https://pyth.network/).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEmaPrice(bytes32)":"b5dcc911","getEmaPriceNoOlderThan(bytes32,uint256)":"711a2e28","getEmaPriceUnsafe(bytes32)":"9474f45b","getPrice(bytes32)":"31d98b3f","getPriceNoOlderThan(bytes32,uint256)":"a4ae35e0","getPriceUnsafe(bytes32)":"96834ad3","getUpdateFee(bytes[])":"d47eed45","getValidTimePeriod()":"e18910a3","parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":"4716e9c5","updatePriceFeeds(bytes[])":"ef9e5e28","updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":"b9256d28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getEmaPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"publishTimes\",\"type\":\"uint64[]\"}],\"name\":\"updatePriceFeedsIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pyth Data Association\",\"details\":\"Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\",\"kind\":\"dev\",\"methods\":{\"getEmaPrice(bytes32)\":{\"details\":\"Reverts if the EMA price is not available.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceUnsafe(bytes32)\":{\"details\":\"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPrice(bytes32)\":{\"details\":\"Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceUnsafe(bytes32)\":{\"details\":\"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getUpdateFee(bytes[])\":{\"params\":{\"updateData\":\"Array of price update data.\"},\"returns\":{\"feeAmount\":\"The required fee in Wei.\"}},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"updatePriceFeeds(bytes[])\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"updateData\":\"Array of price update data.\"}},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"details\":\"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"priceIds\":\"Array of price ids.\",\"publishTimes\":\"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\",\"updateData\":\"Array of price update data.\"}}},\"title\":\"Consume prices from the Pyth Network (https://pyth.network/).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEmaPrice(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price and confidence interval.\"},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time.\"},\"getEmaPriceUnsafe(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\"},\"getPrice(bytes32)\":{\"notice\":\"Returns the price and confidence interval.\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the price that is no older than `age` seconds of the current time.\"},\"getPriceUnsafe(bytes32)\":{\"notice\":\"Returns the price of a price feed without any sanity checks.\"},\"getUpdateFee(bytes[])\":{\"notice\":\"Returns the required fee to update an array of price updates.\"},\"getValidTimePeriod()\":{\"notice\":\"Returns the period (in seconds) that a price feed is considered valid since its publish time\"},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array.\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent.\"},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"notice\":\"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/IPyth.sol\":\"IPyth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lens/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"contracts/lens/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"contracts/lens/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getEmaPrice(bytes32)":{"notice":"Returns the exponentially-weighted moving average price and confidence interval."},"getEmaPriceNoOlderThan(bytes32,uint256)":{"notice":"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time."},"getEmaPriceUnsafe(bytes32)":{"notice":"Returns the exponentially-weighted moving average price of a price feed without any sanity checks."},"getPrice(bytes32)":{"notice":"Returns the price and confidence interval."},"getPriceNoOlderThan(bytes32,uint256)":{"notice":"Returns the price that is no older than `age` seconds of the current time."},"getPriceUnsafe(bytes32)":{"notice":"Returns the price of a price feed without any sanity checks."},"getUpdateFee(bytes[])":{"notice":"Returns the required fee to update an array of price updates."},"getValidTimePeriod()":{"notice":"Returns the period (in seconds) that a price feed is considered valid since its publish time"},"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":{"notice":"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array."},"updatePriceFeeds(bytes[])":{"notice":"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent."},"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":{"notice":"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices."}},"version":1}}},"contracts/lens/IPythEvents.sol":{"IPythEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"}],"devdoc":{"details":"This interface can be used for listening to the updates for off-chain and testing purposes.","events":{"BatchPriceFeedUpdate(uint16,uint64)":{"details":"Emitted when a batch price update is processed successfully.","params":{"chainId":"ID of the source chain that the batch price update comes from.","sequenceNumber":"Sequence number of the batch price update."}},"PriceFeedUpdate(bytes32,uint64,int64,uint64)":{"details":"Emitted when the price feed with `id` has received a fresh update.","params":{"conf":"Confidence interval of the given price update.","id":"The Pyth Price Feed ID.","price":"Price of the given price update.","publishTime":"Publish time of the given price update."}}},"kind":"dev","methods":{},"title":"IPythEvents contains the events that Pyth contract emits.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This interface can be used for listening to the updates for off-chain and testing purposes.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"IPythEvents contains the events that Pyth contract emits.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/IPythEvents.sol\":\"IPythEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lens/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lens/PythStructs.sol":{"PythStructs":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212209f6e27d1ec7955e875dd4b6b7b873df42593ea3df85a4b85d9b805a15126a67164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 PUSH15 0x27D1EC7955E875DD4B6B7B873DF425 SWAP4 0xEA RETURNDATASIZE 0xF8 GAS 0x4B DUP6 0xD9 0xB8 SDIV LOG1 MLOAD 0x26 0xA6 PUSH18 0x64736F6C6343000811003300000000000000 ","sourceMap":"64:1087:7:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212209f6e27d1ec7955e875dd4b6b7b873df42593ea3df85a4b85d9b805a15126a67164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 PUSH15 0x27D1EC7955E875DD4B6B7B873DF425 SWAP4 0xEA RETURNDATASIZE 0xF8 GAS 0x4B DUP6 0xD9 0xB8 SDIV LOG1 MLOAD 0x26 0xA6 PUSH18 0x64736F6C6343000811003300000000000000 ","sourceMap":"64:1087:7:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/PythStructs.sol\":\"PythStructs\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lens/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}